{
  "address": "0x3b2A3077ecF80AAfA126dB18f641a148ad3848e8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "error",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "info",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "detail",
          "type": "uint256"
        }
      ],
      "name": "Failure",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCloseFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCollateralFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setLiquidationIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxAssets",
          "type": "uint256"
        }
      ],
      "name": "_setMaxAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "_setPriceOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlyingAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_phaseOneCutoff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_phaseTwoCutoff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_phaseOneDiscountMantissa",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_phaseTwoDiscountMantissa",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_phaseThreeDiscountMantissa",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setVestingNPVConfig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vestingContractAddress",
          "type": "address"
        }
      ],
      "name": "_supportCollateralVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "_supportMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountAssets",
      "outputs": [
        {
          "internalType": "contract CToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountToVesting",
      "outputs": [
        {
          "internalType": "contract IVesting",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "checkMembership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "cTokens",
          "type": "address[]"
        }
      ],
      "name": "enterMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenAddress",
          "type": "address"
        }
      ],
      "name": "exitMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAssetsIn",
      "outputs": [
        {
          "internalType": "contract CToken[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isComptroller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "contract IVesting",
          "name": "vestingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateCalculateSeizeTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationIncentiveMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVesting",
          "name": "_vestingContract",
          "type": "address"
        }
      ],
      "name": "liquidatorClaimOwedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mintAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingComptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vestingContractAddress",
          "type": "address"
        }
      ],
      "name": "registerVestingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vestingContractWrapper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seizeAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_seizeTokens",
          "type": "uint256"
        },
        {
          "internalType": "contract IVesting",
          "name": "_vestingContract",
          "type": "address"
        }
      ],
      "name": "seizeVestingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "transferTokens",
          "type": "uint256"
        }
      ],
      "name": "transferAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "vestingCalculateNPV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVesting",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vestingContractInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enabledAsCollateral",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "vestingContractWrapper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "unvestedTokenLiquidator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOwedToLiquidator",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingNPVConfig",
      "outputs": [
        {
          "internalType": "address",
          "name": "underlyingAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "phaseOneDiscountMantissa",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "phaseTwoDiscountMantissa",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "phaseThreeDiscountMantissa",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "phaseOneCutoff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "phaseTwoCutoff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vestingContractAddress",
          "type": "address"
        }
      ],
      "name": "withdrawVestingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5050c167212d7ab6ea2d036a7101cee6d468b88f6c030d4a6f46d6c1ac70e197",
  "receipt": {
    "to": null,
    "from": "0x3652588636C9D85125Fa264f794a63E3af188E03",
    "contractAddress": "0x3b2A3077ecF80AAfA126dB18f641a148ad3848e8",
    "transactionIndex": 0,
    "gasUsed": "41709354",
    "logsBloom": "0x
    "blockHash": "0x6f9ee81271336c487ea98020ef04086e9d1deeca5fb6a332416e945eac9262ab",
    "transactionHash": "0x5050c167212d7ab6ea2d036a7101cee6d468b88f6c030d4a6f46d6c1ac70e197",
    "logs": [],
    "blockNumber": 9656457,
    "cumulativeGasUsed": "456093",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "759aa4e86053a63ffc581a694a10b6ce",
  "metadata": "{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCloseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCollateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"_setLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxAssets\",\"type\":\"uint256\"}],\"name\":\"_setMaxAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"_setPriceOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_phaseOneCutoff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phaseTwoCutoff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phaseOneDiscountMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phaseTwoDiscountMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phaseThreeDiscountMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setVestingNPVConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingContractAddress\",\"type\":\"address\"}],\"name\":\"_supportCollateralVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"_supportMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountToVesting\",\"outputs\":[{\"internalType\":\"contract IVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"checkMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAssetsIn\",\"outputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isComptroller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"contract IVesting\",\"name\":\"vestingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateCalculateSeizeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationIncentiveMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVesting\",\"name\":\"_vestingContract\",\"type\":\"address\"}],\"name\":\"liquidatorClaimOwedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mintAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingContractAddress\",\"type\":\"address\"}],\"name\":\"registerVestingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vestingContractWrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_seizeTokens\",\"type\":\"uint256\"},{\"internalType\":\"contract IVesting\",\"name\":\"_vestingContract\",\"type\":\"address\"}],\"name\":\"seizeVestingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"vestingCalculateNPV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVesting\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingContractInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledAsCollateral\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"vestingContractWrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unvestedTokenLiquidator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOwedToLiquidator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingNPVConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"phaseOneDiscountMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phaseTwoDiscountMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phaseThreeDiscountMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phaseOneCutoff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phaseTwoCutoff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingContractAddress\",\"type\":\"address\"}],\"name\":\"withdrawVestingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This was the first version of the Comptroller brains.  We keep it so our tests can continue to do the real-life behavior of upgrading from this logic forward.\",\"methods\":{\"_setCloseFactor(uint256)\":{\"details\":\"Admin function to set closeFactor\",\"params\":{\"newCloseFactorMantissa\":\"New close factor, scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"_setCollateralFactor(address,uint256)\":{\"details\":\"Admin function to set per-market collateralFactor\",\"params\":{\"cToken\":\"The market to set the factor on\",\"newCollateralFactorMantissa\":\"The new collateral factor, scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"_setLiquidationIncentive(uint256)\":{\"details\":\"Admin function to set liquidationIncentive\",\"params\":{\"newLiquidationIncentiveMantissa\":\"New liquidationIncentive scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"_setMaxAssets(uint256)\":{\"details\":\"Admin function to set maxAssets\",\"params\":{\"newMaxAssets\":\"New max assets\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"_setPriceOracle(address)\":{\"details\":\"Admin function to set a new price oracle\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setVestingNPVConfig(address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Admin function to set the VestingNPVConfig struct\",\"params\":{\"_phaseOneCutoff\":\"value in block time for first phase \",\"_phaseOneDiscountMantissa\":\"discount factor (e.g. 0.5) per phase in Mantissa\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"}},\"_supportCollateralVault(address)\":{\"details\":\"Admin function to set isListed and add support for the market\",\"params\":{\"_vestingContractAddress\":\"to list as collateral\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"}},\"_supportMarket(address)\":{\"details\":\"Admin function to set isListed and add support for the market\",\"params\":{\"cToken\":\"The address of the market (token) to list\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"}},\"borrowAllowed(address,address,uint256)\":{\"params\":{\"borrowAmount\":\"The amount of underlying the account would borrow\",\"borrower\":\"The account which would borrow the asset\",\"cToken\":\"The market to verify the borrow against\"},\"returns\":{\"_0\":\"0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"checkMembership(address,address)\":{\"params\":{\"account\":\"The address of the account to check\",\"cToken\":\"The cToken to check\"},\"returns\":{\"_0\":\"True if the account is in the asset, otherwise false.\"}},\"exitMarket(address)\":{\"details\":\"Sender must not have an outstanding borrow balance in the asset,  or be providing neccessary collateral for an outstanding borrow.\",\"params\":{\"cTokenAddress\":\"The address of the asset to be removed\"},\"returns\":{\"_0\":\"Whether or not the account successfully exited the market\"}},\"getAccountLiquidity(address)\":{\"returns\":{\"_0\":\"(possible error code (semi-opaque), account liquidity in excess of collateral requirements,          account shortfall below collateral requirements)\"}},\"getAssetsIn(address)\":{\"params\":{\"account\":\"The address of the account to pull assets for\"},\"returns\":{\"_0\":\"A dynamic list with the assets the account has entered\"}},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"repayAmount\":\"The amount of underlying being repaid\",\"vestingContract\":\"Asset which was used as collateral and will be seized\"}},\"liquidateCalculateSeizeTokens(address,uint256)\":{\"details\":\"Used in liquidation (called in cToken.liquidateBorrowFresh)\",\"params\":{\"cTokenBorrowed\":\"The address of the borrowed cToken\",\"repayAmount\":\"The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\"},\"returns\":{\"_0\":\"(errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\"}},\"mintAllowed(address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the mint against\",\"mintAmount\":\"The amount of underlying being supplied to the market in exchange for tokens\",\"minter\":\"The account which would get the minted tokens\"},\"returns\":{\"_0\":\"0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"redeemAllowed(address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the redeem against\",\"redeemTokens\":\"The number of cTokens to exchange for the underlying asset in the market\",\"redeemer\":\"The account which would redeem the tokens\"},\"returns\":{\"_0\":\"0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"redeemVerify(address,address,uint256,uint256)\":{\"params\":{\"cToken\":\"Asset being redeemed\",\"redeemAmount\":\"The amount of the underlying asset being redeemed\",\"redeemTokens\":\"The number of tokens being redeemed\",\"redeemer\":\"The address redeeming the tokens\"}},\"repayBorrowAllowed(address,address,address,uint256)\":{\"params\":{\"borrower\":\"The account which would borrowed the asset\",\"cToken\":\"The market to verify the repay against\",\"payer\":\"The account which would repay the asset\",\"repayAmount\":\"The amount of the underlying asset the account would repay\"},\"returns\":{\"_0\":\"0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"seizeAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The number of collateral tokens to seize\",\"vestingContractWrapper\":\"Asset which was used as collateral and will be seized\"}},\"transferAllowed(address,address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the transfer against\",\"dst\":\"The account which receives the tokens\",\"src\":\"The account which sources the tokens\",\"transferTokens\":\"The number of cTokens to transfer\"},\"returns\":{\"_0\":\"0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"vestingCalculateNPV(address)\":{\"details\":\"Note that we calculate the exchangeRateStored for each collateral cToken using stored data,  without calculating accumulated interest.\",\"params\":{\"owner\":\"The original owner / recipient of the vesting Collateral\"},\"returns\":{\"_0\":\"(possible error code,          accountLiquidity)\"}}},\"stateVariables\":{\"markets\":{\"details\":\"Used e.g. to determine if a market is supported\"}},\"title\":\"Compound's Comptroller Contract\"},\"userdoc\":{\"methods\":{\"_setCloseFactor(uint256)\":{\"notice\":\"Sets the closeFactor used when liquidating borrows\"},\"_setCollateralFactor(address,uint256)\":{\"notice\":\"Sets the collateralFactor for a market\"},\"_setLiquidationIncentive(uint256)\":{\"notice\":\"Sets liquidationIncentive\"},\"_setMaxAssets(uint256)\":{\"notice\":\"Sets maxAssets which controls how many markets can be entered\"},\"_setPriceOracle(address)\":{\"notice\":\"Sets a new price oracle for the comptroller\"},\"_setVestingNPVConfig(address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"sets the VestingNPVConfigValues\"},\"_supportCollateralVault(address)\":{\"notice\":\"Add the vesting contract collateral and list as collateral\"},\"_supportMarket(address)\":{\"notice\":\"Add the market to the markets mapping and set it as listed\"},\"accountAssets(address,uint256)\":{\"notice\":\"Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\"},\"admin()\":{\"notice\":\"Administrator for this contract\"},\"borrowAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to borrow the underlying asset of the given market\"},\"checkMembership(address,address)\":{\"notice\":\"Returns whether the given account is entered in the given asset\"},\"closeFactorMantissa()\":{\"notice\":\"Multiplier used to calculate the maximum repayAmount when liquidating a borrow\"},\"comptrollerImplementation()\":{\"notice\":\"Active brains of Unitroller\"},\"exitMarket(address)\":{\"notice\":\"Removes asset from sender's account liquidity calculation\"},\"getAccountLiquidity(address)\":{\"notice\":\"Determine the current account liquidity wrt collateral requirements\"},\"getAssetsIn(address)\":{\"notice\":\"Returns the assets an account has entered\"},\"isComptroller()\":{\"notice\":\"Indicator that this is a Comptroller contract (for inspection)\"},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the liquidation should be allowed to occur\"},\"liquidateCalculateSeizeTokens(address,uint256)\":{\"notice\":\"Calculate number of tokens of collateral asset to seize given an underlying amount\"},\"liquidationIncentiveMantissa()\":{\"notice\":\"Multiplier representing the discount on collateral that a liquidator receives\"},\"markets(address)\":{\"notice\":\"Official mapping of cTokens -> Market metadata\"},\"maxAssets()\":{\"notice\":\"Max number of assets a single account can participate in (borrow or use as collateral)\"},\"mintAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to mint tokens in the given market\"},\"oracle()\":{\"notice\":\"Oracle which gives the price of any given asset\"},\"pendingAdmin()\":{\"notice\":\"Pending administrator for this contract\"},\"pendingComptrollerImplementation()\":{\"notice\":\"Pending brains of Unitroller\"},\"redeemAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to redeem tokens in the given market\"},\"redeemVerify(address,address,uint256,uint256)\":{\"notice\":\"Validates redeem and reverts on rejection.\"},\"registerVestingContract(address)\":{\"notice\":\"Registers vesting contract. Validates the recipient is the vault contract and then sets enabled as collateral to true\"},\"repayBorrowAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to repay a borrow in the given market\"},\"seizeAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the seizing of assets should be allowed to occur\"},\"transferAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to transfer tokens in the given market\"},\"vestingCalculateNPV(address)\":{\"notice\":\"Calculates the NPV of a collateral vesting contract for a given originalOwner\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/Comptroller.sol\":\"Comptroller\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7b2b8baa20fd60ab4a328c8e34c64a353651b80ba4b5b157cbb61813f6f85d55\",\"license\":\"MIT\"},\"contracts/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./interfaces/IVesting.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\nabstract contract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(ComptrollerInterface comptroller_,\\n                        InterestRateModel interestRateModel_,\\n                        uint initialExchangeRateMantissa_,\\n                        string memory name_,\\n                        string memory symbol_,\\n                        uint8 decimals_) public {\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n        // Set the comptroller\\n        uint err = _setComptroller(comptroller_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = uint(-1);\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srcTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srcTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != uint(-1)) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        // unused function\\n        // comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external override nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external override nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external override returns (uint) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view override returns (uint, uint, uint, uint) {\\n        uint cTokenBalance = accountTokens[account];\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view override returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view override returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external override nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external override nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view override returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public override nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view override returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\n     */\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view override returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public override returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = getBlockNumber();\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\\n        require(mathErr == MathError.NO_ERROR, \\\"could not calculate block delta\\\");\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor;\\n        uint interestAccumulated;\\n        uint totalBorrowsNew;\\n        uint totalReservesNew;\\n        uint borrowIndexNew;\\n\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({mantissa: borrowRateMantissa}), blockDelta);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    struct MintLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\n    }\\n\\n    struct RedeemLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, vars.redeemAmount);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(msg.sender, borrowAmount);\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    /**\\n      * @notice Users borrow assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\\n        /* Fail if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, IVesting vestingContract) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, vestingContract);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, IVesting vestingContract) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), vestingContract, liquidator, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == uint(-1)) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n\\n        /* Fail if repayBorrow fails */\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), actualRepayAmount);\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        address vestingToken = vestingContract.vestingToken();\\n        require(EIP20Interface(vestingToken).balanceOf(address(vestingContract)) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // THIS IS NO APPLICABLE TO OUR PROTOCOL. If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        // uint seizeError;\\n        // if (address(cTokenCollateral) == address(this)) {\\n        //     seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        // } else {\\n        //     seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        // }\\n        uint seizeError = comptroller.seizeVestingTokens(liquidator, borrower, seizeTokens, vestingContract);\\n        \\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(vestingContract), seizeTokens);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(address liquidator, address borrower, uint seizeTokens) external override nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    struct SeizeInternalLocalVars {\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n        uint liquidatorSeizeTokens;\\n        uint protocolSeizeTokens;\\n        uint protocolSeizeAmount;\\n        uint exchangeRateMantissa;\\n        uint totalReservesNew;\\n        uint totalSupplyNew;\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        SeizeInternalLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (vars.mathErr, vars.borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(vars.mathErr));\\n        }\\n\\n        vars.protocolSeizeTokens = mul_(seizeTokens, Exp({mantissa: protocolSeizeShareMantissa}));\\n        vars.liquidatorSeizeTokens = sub_(seizeTokens, vars.protocolSeizeTokens);\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"exchange rate math error\\\");\\n\\n        vars.protocolSeizeAmount = mul_ScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), vars.protocolSeizeTokens);\\n\\n        vars.totalReservesNew = add_(totalReserves, vars.protocolSeizeAmount);\\n        vars.totalSupplyNew = sub_(totalSupply, vars.protocolSeizeTokens);\\n\\n        (vars.mathErr, vars.liquidatorTokensNew) = addUInt(accountTokens[liquidator], vars.liquidatorSeizeTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        totalReserves = vars.totalReservesNew;\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[borrower] = vars.borrowerTokensNew;\\n        accountTokens[liquidator] = vars.liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, vars.liquidatorSeizeTokens);\\n        emit Transfer(borrower, address(this), vars.protocolSeizeTokens);\\n        emit ReservesAdded(address(this), vars.protocolSeizeAmount, vars.totalReservesNew);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address payable newPendingAdmin) external override returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() external override returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets a new comptroller for the market\\n      * @dev Admin function to set a new comptroller\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setComptroller(ComptrollerInterface newComptroller) public override returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\\n        }\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n      * @dev Admin function to accrue interest and set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactor(uint newReserveFactorMantissa) external override nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n      * @dev Admin function to set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (error, ) = _addReservesFresh(addAmount);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n        // totalReserves + actualAddAmount\\n        uint totalReservesNew;\\n        uint actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        /* Revert on overflow */\\n        require(totalReservesNew >= totalReserves, \\\"add reserves unexpected overflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint reduceAmount) external override nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalReservesNew = totalReserves - reduceAmount;\\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\\n        require(totalReservesNew <= totalReserves, \\\"reduce reserves unexpected underflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(admin, reduceAmount);\\n\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public override returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal virtual view returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) internal virtual returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal virtual;\\n\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\",\"keccak256\":\"0x21f8449fae3c461579a90fe9fcd16b14dbea9a0cf9f620a08371e16fcfb28d6c\",\"license\":\"MIT\"},\"contracts/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./interfaces/IVesting.sol\\\";\\n\\ncontract CTokenStorage {\\n    // Guard variable for re-entrancy checks\\n    bool internal _notEntered;\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    // Maximum borrow rate that can ever be applied (.0005% / block)\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    // Maximum fraction of interest that can be set aside for reserves\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    // Administrator for this contract\\n    address payable public admin;\\n\\n    // Pending administrator for this contract\\n    address payable public pendingAdmin;\\n\\n    // Contract which oversees inter-cToken operations\\n    ComptrollerInterface public comptroller;\\n\\n    // Model which tells what the current interest rate should be\\n    InterestRateModel public interestRateModel;\\n\\n    // Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n    uint internal initialExchangeRateMantissa;\\n\\n    // Fraction of interest currently set aside for reserves\\n    uint public reserveFactorMantissa;\\n\\n    // Block number that interest was last accrued at\\n    uint public accrualBlockNumber;\\n\\n    // Accumulator of the total earned interest rate since the opening of the market\\n    uint public borrowIndex;\\n\\n    // Total amount of outstanding borrows of the underlying in this market\\n    uint public totalBorrows;\\n\\n    // Total amount of reserves of the underlying held in this market\\n    uint public totalReserves;\\n\\n    // Total number of tokens in circulation\\n    uint public totalSupply;\\n\\n    // Official record of token balances for each account\\n    mapping (address => uint) internal accountTokens;\\n\\n    // Approved token transfer amounts on behalf of others\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /* \\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    // Mapping of account addresses to outstanding borrow balances\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n    // Share of seized collateral that is added to reserves\\n    uint public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n\\n}\\n\\nabstract contract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external virtual returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external virtual returns (bool);\\n    function approve(address spender, uint amount) external virtual returns (bool);\\n    function allowance(address owner, address spender) external virtual view returns (uint);\\n    function balanceOf(address owner) external virtual view returns (uint);\\n    function balanceOfUnderlying(address owner) external virtual returns (uint);\\n    function getAccountSnapshot(address account) external virtual view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external virtual view returns (uint);\\n    function supplyRatePerBlock() external virtual view returns (uint);\\n    function totalBorrowsCurrent() external virtual returns (uint);\\n    function borrowBalanceCurrent(address account) external virtual returns (uint);\\n    function borrowBalanceStored(address account) external virtual view returns (uint);\\n    function exchangeRateCurrent() external virtual returns (uint);\\n    function exchangeRateStored() external virtual view returns (uint);\\n    function getCash() external virtual view returns (uint);\\n    function accrueInterest() external virtual returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external virtual returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external virtual returns (uint);\\n    function _acceptAdmin() external virtual returns (uint);\\n    function _setComptroller(ComptrollerInterface newComptroller) external virtual returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) external virtual returns (uint);\\n    function _reduceReserves(uint reduceAmount) external virtual returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) external virtual returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\nabstract contract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external virtual returns (uint);\\n    function redeem(uint redeemTokens) external virtual returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external virtual returns (uint);\\n    function borrow(uint borrowAmount) external virtual returns (uint);\\n    function repayBorrow(uint repayAmount) external virtual returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external virtual returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, IVesting vestingContract) external virtual returns (uint);\\n    function sweepToken(EIP20NonStandardInterface token) external virtual;\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external virtual returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\nabstract contract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) external virtual;\\n}\\n\\nabstract contract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) external virtual;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() external virtual;\\n}\\n\",\"keccak256\":\"0x6d694477e0b2fa0a05136600e14ad4479cd5682389c7905e94aba30aedd1e879\",\"license\":\"MIT\"},\"contracts/CarefulMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\n/**\\n  * @title Careful Math\\n  * @author Compound\\n  * @notice Derived from OpenZeppelin's SafeMath library\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n  */\\ncontract CarefulMath {\\n\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n    * @dev Multiplies two numbers, returns an error on overflow.\\n    */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, returns an error on overflow.\\n    */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev add a and b and then subtract c\\n    */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\",\"keccak256\":\"0xb70ce86b4d600725bd8391f279b77d8b7f45d9ddd65b34b4e0cb77c2ee376e58\",\"license\":\"MIT\"},\"contracts/Comptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { IVesting } from \\\"./interfaces/IVesting.sol\\\";\\nimport { VestingContractWrapper } from \\\"./VestingContractWrapper.sol\\\";\\nimport { IVestingContractWrapper } from \\\"./interfaces/IVestingContractWrapper.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\n/**\\n * @title Compound's Comptroller Contract\\n * @dev This was the first version of the Comptroller brains.\\n *  We keep it so our tests can continue to do the real-life behavior of upgrading from this logic forward.\\n */\\ncontract Comptroller is ComptrollerV1Storage, ComptrollerInterface, ComptrollerErrorReporter, Exponential, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    struct Market {\\n        // Whether or not this market is listed\\n        bool isListed;\\n\\n        // Multiplier representing the most one can borrow against their collateral in this market.\\n        // For instance, 0.9 to allow borrowing 90% of collateral value.\\n        // Must be between 0 and 1, and stored as a mantissa.\\n        uint collateralFactorMantissa;\\n\\n        // Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address => bool) accountMembership;\\n    }\\n\\n    // Paramters for calculating NPV of Collateral for single Market\\n    // set with admin function _setVestingNPVConfig\\n    struct VestingNPVConfig {\\n        address underlyingAddress;\\n        uint phaseOneDiscountMantissa;\\n        uint phaseTwoDiscountMantissa;\\n        uint phaseThreeDiscountMantissa;\\n        uint256 phaseOneCutoff;\\n        uint256 phaseTwoCutoff;\\n        uint collateralFactorMantissa;\\n    }\\n\\n    VestingNPVConfig public vestingNPVConfig; //instantiating VestingNPVConfig\\n\\n\\n    struct VestingContractInfo {\\n        // Whether or not this vesting contract is listed\\n        bool isListed;\\n        bool enabledAsCollateral;\\n        address vestingContractWrapper;\\n        address unvestedTokenLiquidator;\\n        uint256 amountOwedToLiquidator;\\n    }\\n\\n    /**\\n     * @notice Official mapping of cTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n    mapping(IVesting => VestingContractInfo) public vestingContractInfo;\\n\\n    // Mapping of account to vesting contract\\n    mapping(address => IVesting) public accountToVesting;\\n\\n    // /**\\n    //  * @notice Emitted when an admin supports a market\\n    //  */\\n    // event MarketListed(CToken cToken);\\n\\n    // /**\\n    //  * @notice Emitted when an account enters a market\\n    //  */\\n    // event MarketEntered(CToken cToken, address account);\\n\\n    // /**\\n    //  * @notice Emitted when an account exits a market\\n    //  */\\n    // event MarketExited(CToken cToken, address account);\\n\\n    // /**\\n    //  * @notice Emitted when close factor is changed by admin\\n    //  */\\n    // event NewCloseFactor(uint oldCloseFactorMantissa, uint newCloseFactorMantissa);\\n\\n    // *\\n    //  * @notice Emitted when a collateral factor is changed by admin\\n     \\n    // event NewCollateralFactor(CToken cToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);\\n\\n    // /**\\n    //  * @notice Emitted when liquidation incentive is changed by admin\\n    //  */\\n    // event NewLiquidationIncentive(uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);\\n\\n    // /**\\n    //  * @notice Emitted when maxAssets is changed by admin\\n    //  */\\n    // event NewMaxAssets(uint oldMaxAssets, uint newMaxAssets);\\n\\n    // /**\\n    //  * @notice Emitted when price oracle is changed\\n    //  */\\n    // event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\\n\\n    // closeFactorMantissa must be strictly greater than this value\\n    uint constant closeFactorMinMantissa = 5e16; // 0.05\\n\\n    // closeFactorMantissa must not exceed this value\\n    uint constant closeFactorMaxMantissa = 9e17; // 0.9\\n\\n    // No collateralFactorMantissa may exceed this value\\n    uint constant collateralFactorMaxMantissa = 9e17; // 0.9\\n\\n    // liquidationIncentiveMantissa must be no less than this value\\n    uint constant liquidationIncentiveMinMantissa = mantissaOne;\\n\\n    // liquidationIncentiveMantissa must be no greater than this value\\n    uint constant liquidationIncentiveMaxMantissa = 15e17; // 1.5\\n\\n    constructor() public {\\n        admin = msg.sender;\\n    }\\n\\n    /*** Assets You Are In ***/\\n\\n    /**\\n     * @notice Returns the assets an account has entered\\n     * @param account The address of the account to pull assets for\\n     * @return A dynamic list with the assets the account has entered\\n     */\\n    function getAssetsIn(address account) external view returns (CToken[] memory) {\\n        CToken[] memory assetsIn = accountAssets[account];\\n\\n        return assetsIn;\\n    }\\n\\n    /**\\n     * @notice Returns whether the given account is entered in the given asset\\n     * @param account The address of the account to check\\n     * @param cToken The cToken to check\\n     * @return True if the account is in the asset, otherwise false.\\n     */\\n    function checkMembership(address account, CToken cToken) external view returns (bool) {\\n        return markets[address(cToken)].accountMembership[account];\\n    }\\n\\n    /**\\n     * @notice Registers vesting contract. Validates the recipient is the vault contract and then sets enabled as collateral to true\\n     */\\n    function registerVestingContract(address _vestingContractAddress) external override {\\n        IVesting _vestingContract = IVesting(_vestingContractAddress);\\n        \\n        // Require collateral is listed\\n        require(vestingContractInfo[_vestingContract].isListed, \\\"Must be listed\\\");\\n\\n        // Require collateral is not enabled yet\\n        require(!vestingContractInfo[_vestingContract].enabledAsCollateral, \\\"Must not be enabled\\\");\\n\\n        // Validate that the recipient of the vesting contract is this Comptroller\\n        require(_vestingContract.recipient() == address(this) , \\\"Recipient must be Comptroller\\\");\\n\\n        // Validate original recipient is caller. This assumes that vestingContractWrapper is already deployed in _supportCollateralVault\\n        require(\\n            IVestingContractWrapper(vestingContractInfo[_vestingContract].vestingContractWrapper).originalRecipient() == msg.sender,\\n            \\\"Original recipient must be caller\\\"\\n        );\\n\\n        // Enable collateral for user in the Comptroller\\n        vestingContractInfo[_vestingContract].enabledAsCollateral = true;\\n        accountToVesting[msg.sender] = _vestingContract;\\n\\n        // Set recipient from this to vesting contract wrapper\\n        _vestingContract.setRecipient(vestingContractInfo[_vestingContract].vestingContractWrapper);\\n    }\\n\\n    function withdrawVestingContract(address _vestingContractAddress) external override {\\n        IVesting _vestingContract = IVesting(_vestingContractAddress);\\n        // Validate that the recipient of the vesting contract has been set by the owner\\n        address originalRecipient = IVestingContractWrapper(vestingContractInfo[_vestingContract].vestingContractWrapper).originalRecipient();\\n        require(_vestingContract.recipient() == vestingContractInfo[_vestingContract].vestingContractWrapper, \\\"Please set recipient to vault contract\\\");\\n        require(originalRecipient == msg.sender , \\\"Original recipient must be caller\\\");\\n\\n        // Validate all debt is repaid to withdraw contract\\n        CToken[] memory assets = accountAssets[msg.sender];\\n        for (uint i = 0; i < assets.length; i++) {\\n            CToken asset = assets[i];\\n\\n            // Read the balances and exchange rate from the cToken\\n            ( , , uint256 borrowBalance, ) = asset.getAccountSnapshot(msg.sender);\\n            require(borrowBalance == 0, \\\"Must pay off debt\\\");\\n        }\\n\\n        // Validate that there is no pending liquidator owed tokens\\n        require(vestingContractInfo[_vestingContract].amountOwedToLiquidator == 0, \\\"Amount owed to previous liquidator\\\");\\n\\n        // Set enabled collateral to false and delete account to vault mapping\\n        delete vestingContractInfo[_vestingContract].enabledAsCollateral;\\n        delete accountToVesting[msg.sender];\\n\\n        // Transfer recipient back from wrapper to original recipient\\n        IVestingContractWrapper(vestingContractInfo[_vestingContract].vestingContractWrapper).setOriginalRecipient();\\n\\n        // Transfer existing balance of tokens FROM vesting vault TO original recipient in case tokens were claimed to user\\n        IERC20 vestingToken = IERC20(_vestingContract.vestingToken());\\n        uint256 balance = vestingToken.balanceOf(vestingContractInfo[_vestingContract].vestingContractWrapper);\\n        vestingToken.transferFrom(\\n            vestingContractInfo[_vestingContract].vestingContractWrapper,\\n            originalRecipient,\\n            balance\\n        );\\n    }\\n    \\n    // IMPORTANT: Only used to enter the lending token market so borrower can execute borrows\\n    // The collateral vesting contract will be tracked separately. In this case, there will only be one USDC cToken allowed\\n    function enterMarkets(address[] memory cTokens) public override returns (uint[] memory) {\\n        uint len = cTokens.length;\\n\\n        uint[] memory results = new uint[](len);\\n        for (uint i = 0; i < len; i++) {\\n            CToken cToken = CToken(cTokens[i]);\\n            Market storage marketToJoin = markets[address(cToken)];\\n\\n            if (!marketToJoin.isListed) {\\n                // if market is not listed, cannot join move along\\n                results[i] = uint(Error.MARKET_NOT_LISTED);\\n                continue;\\n            }\\n\\n            if (marketToJoin.accountMembership[msg.sender] == true) {\\n                // if already joined, move along\\n                results[i] = uint(Error.NO_ERROR);\\n                continue;\\n            }\\n\\n            if (accountAssets[msg.sender].length >= maxAssets)  {\\n                // if no space, cannot join, move along\\n                results[i] = uint(Error.TOO_MANY_ASSETS);\\n                continue;\\n            }\\n\\n            // survived the gauntlet, add to list\\n            // NOTE: we store these somewhat redundantly as a significant optimization\\n            //  this avoids having to iterate through the list for the most common use cases\\n            //  that is, only when we need to perform liquidity checks\\n            //   and not whenever we want to check if an account is in a particular market\\n            marketToJoin.accountMembership[msg.sender] = true;\\n            accountAssets[msg.sender].push(cToken);\\n\\n            results[i] = uint(Error.NO_ERROR);\\n        }\\n\\n        return results;\\n    }\\n\\n    /**\\n     * @notice Removes asset from sender's account liquidity calculation\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\n     *  or be providing neccessary collateral for an outstanding borrow.\\n     * @param cTokenAddress The address of the asset to be removed\\n     * @return Whether or not the account successfully exited the market\\n     */\\n    function exitMarket(address cTokenAddress) external override returns (uint) {\\n        CToken cToken = CToken(cTokenAddress);\\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(msg.sender);\\n        require(oErr == 0, \\\"exitMarket: getAccountSnapshot failed\\\"); // semi-opaque error code\\n\\n        /* Fail if the sender has a borrow balance */\\n        if (amountOwed != 0) {\\n            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\\n        }\\n\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\n        uint allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\\n        if (allowed != 0) {\\n            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\\n        }\\n\\n        Market storage marketToExit = markets[address(cToken)];\\n\\n        /* Return true if the sender is not already \\u2018in\\u2019 the market */\\n        if (!marketToExit.accountMembership[msg.sender]) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Set cToken account membership to false */\\n        delete marketToExit.accountMembership[msg.sender];\\n\\n        /* Delete cToken from the account\\u2019s list of assets */\\n        // load into memory for faster iteration\\n        CToken[] memory userAssetList = accountAssets[msg.sender];\\n        uint len = userAssetList.length;\\n        uint assetIndex = len;\\n        for (uint i = 0; i < len; i++) {\\n            if (userAssetList[i] == cToken) {\\n                assetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\n        assert(assetIndex < len);\\n\\n        // copy last item in list to location of item to be removed, reduce length by 1\\n        CToken[] storage storedList = accountAssets[msg.sender];\\n        storedList[assetIndex] = storedList[storedList.length - 1];\\n        storedList.pop();\\n\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function seizeVestingTokens(address _liquidator, address _borrower, uint _seizeTokens, IVesting _vestingContract) external override nonReentrant returns (uint) {\\n        // msg.sender is the cToken\\n        uint allowed = seizeAllowed(\\n            vestingContractInfo[_vestingContract].vestingContractWrapper,\\n            msg.sender,\\n            _liquidator,\\n            _borrower,\\n            _seizeTokens\\n        );\\n        require(allowed == 0, \\\"Not allowed\\\");\\n        // We only allow one liquidator at a time for unvested for simplicity. Otherwise liquidators can overwrite each other's owed tokens when \\n        // liquidating unvested tokens\\n        require(vestingContractInfo[_vestingContract].amountOwedToLiquidator == 0, \\\"Amount owed to previous liquidator\\\");\\n        require(_borrower != _liquidator, \\\"Borrower is _liquidator\\\");\\n\\n        // Call claim to ensure vested but unclaimed tokens are liquid in this vesting contract wrapper\\n        _vestingContract.claim();\\n        \\n        // If seized tokens is less than liquid amount, then transfer seize tokens to _liquidator\\n        uint256 currentLiquidBalance = IERC20(_vestingContract.vestingToken()).balanceOf(vestingContractInfo[_vestingContract].vestingContractWrapper);\\n        if (_seizeTokens <= currentLiquidBalance) {\\n            IERC20(_vestingContract.vestingToken()).transferFrom(\\n                vestingContractInfo[_vestingContract].vestingContractWrapper,\\n                _liquidator,\\n                _seizeTokens\\n            );\\n\\n        } else {\\n\\n\\n            IERC20(_vestingContract.vestingToken()).transferFrom(\\n                vestingContractInfo[_vestingContract].vestingContractWrapper,\\n                _liquidator,\\n                currentLiquidBalance\\n            );\\n\\n            // For this version we will not apply future value of seized tokens owed to liquidator. THis can be done by creating a \\n            // future value of remaining seize tokens and setting it as owed to liquidator. Then need to update get account liquidity\\n            // buy applying a NPV *including* amountOwedToLiquidator\\n            vestingContractInfo[_vestingContract].unvestedTokenLiquidator = _liquidator;\\n            vestingContractInfo[_vestingContract].amountOwedToLiquidator = _seizeTokens.sub(currentLiquidBalance);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function liquidatorClaimOwedTokens(IVesting _vestingContract) external override nonReentrant {\\n        require(msg.sender == vestingContractInfo[_vestingContract].unvestedTokenLiquidator);\\n        \\n        _vestingContract.claim();\\n        uint256 currentLiquidBalance = IERC20(_vestingContract.vestingToken()).balanceOf(vestingContractInfo[_vestingContract].vestingContractWrapper);\\n        // If owed amount is less than liquid, transfer owed amount and reset state\\n        if (vestingContractInfo[_vestingContract].amountOwedToLiquidator <= currentLiquidBalance) {        \\n            IERC20(_vestingContract.vestingToken()).transferFrom(\\n                vestingContractInfo[_vestingContract].vestingContractWrapper,\\n                msg.sender,\\n                vestingContractInfo[_vestingContract].amountOwedToLiquidator\\n            );\\n\\n            delete vestingContractInfo[_vestingContract].amountOwedToLiquidator;\\n            delete vestingContractInfo[_vestingContract].unvestedTokenLiquidator;\\n        } else {\\n            IERC20(_vestingContract.vestingToken()).transferFrom(\\n                vestingContractInfo[_vestingContract].vestingContractWrapper,\\n                msg.sender,\\n                currentLiquidBalance\\n            );\\n\\n            // Sub liquid tokens transferred back\\n            vestingContractInfo[_vestingContract].amountOwedToLiquidator = vestingContractInfo[_vestingContract].amountOwedToLiquidator.sub(currentLiquidBalance);\\n        }\\n    }\\n\\n    /*** Policy Hooks ***/\\n\\n    /**\\n     * @notice Checks if the account should be allowed to mint tokens in the given market\\n     * @param cToken The market to verify the mint against\\n     * @param minter The account which would get the minted tokens\\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external override returns (uint) {\\n        minter;       // currently unused\\n        mintAmount;   // currently unused\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // *may include Policy Hook-type checks\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates mint and reverts on rejection.\\n     * @param cToken Asset being minted\\n     * @param minter The address minting the tokens\\n     * @param mintAmount The amount of the underlying asset being minted\\n     * @param mintTokens The number of tokens being minted\\n     */\\n    // function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external override {\\n    //     cToken;       // currently unused\\n    //     minter;       // currently unused\\n    //     mintAmount;   // currently unused\\n    //     mintTokens;   // currently unused\\n\\n    //     if (false) {\\n    //         maxAssets = maxAssets; // not pure\\n    //     }\\n    // }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\\n     * @param cToken The market to verify the redeem against\\n     * @param redeemer The account which would redeem the tokens\\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external override returns (uint) {\\n        return redeemAllowedInternal(cToken, redeemer, redeemTokens);\\n    }\\n\\n    function redeemAllowedInternal(address cToken, address redeemer, uint redeemTokens) internal view returns (uint) {\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // *may include Policy Hook-type checks\\n\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n        if (!markets[cToken].accountMembership[redeemer]) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(redeemer, CToken(cToken), redeemTokens, 0);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates redeem and reverts on rejection.\\n     * @param cToken Asset being redeemed\\n     * @param redeemer The address redeeming the tokens\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\n     * @param redeemTokens The number of tokens being redeemed\\n     */\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external override {\\n        cToken;         // currently unused\\n        redeemer;       // currently unused\\n        redeemAmount;   // currently unused\\n        redeemTokens;   // currently unused\\n\\n        // Require tokens is zero or amount is also zero\\n        if (redeemTokens == 0 && redeemAmount > 0) {\\n            revert(\\\"redeemTokens zero\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n     * @param cToken The market to verify the borrow against\\n     * @param borrower The account which would borrow the asset\\n     * @param borrowAmount The amount of underlying the account would borrow\\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external override returns (uint) {\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // *may include Policy Hook-type checks\\n\\n        if (!markets[cToken].accountMembership[borrower]) {\\n            return uint(Error.MARKET_NOT_ENTERED);\\n        }\\n\\n        // Require borrower enabled collateral\\n        require(vestingContractInfo[accountToVesting[borrower]].enabledAsCollateral, \\\"Not enabled as collateral\\\");\\n\\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\\n            return uint(Error.PRICE_ERROR);\\n        }\\n\\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(borrower, CToken(cToken), 0, borrowAmount);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates borrow and reverts on rejection.\\n     * @param cToken Asset whose underlying is being borrowed\\n     * @param borrower The address borrowing the underlying\\n     * @param borrowAmount The amount of the underlying asset requested to borrow\\n     */\\n    // function borrowVerify(address cToken, address borrower, uint borrowAmount) external override {\\n    //     cToken;         // currently unused\\n    //     borrower;       // currently unused\\n    //     borrowAmount;   // currently unused\\n\\n    //     if (false) {\\n    //         maxAssets = maxAssets; // not pure\\n    //     }\\n    // }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\n     * @param cToken The market to verify the repay against\\n     * @param payer The account which would repay the asset\\n     * @param borrower The account which would borrowed the asset\\n     * @param repayAmount The amount of the underlying asset the account would repay\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external override returns (uint) {\\n        payer;         // currently unused\\n        borrower;      // currently unused\\n        repayAmount;   // currently unused\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // *may include Policy Hook-type checks\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates repayBorrow and reverts on rejection.\\n     * @param cToken Asset being repaid\\n     * @param payer The address repaying the borrow\\n     * @param borrower The address of the borrower\\n     * @param repayAmount The amount of underlying being repaid\\n     */\\n    // function repayBorrowVerify(\\n    //     address cToken,\\n    //     address payer,\\n    //     address borrower,\\n    //     uint repayAmount,\\n    //     uint borrowerIndex) external override {\\n    //     cToken;        // currently unused\\n    //     payer;         // currently unused\\n    //     borrower;      // currently unused\\n    //     repayAmount;   // currently unused\\n    //     borrowerIndex; // currently unused\\n\\n    //     if (false) {\\n    //         maxAssets = maxAssets; // not pure\\n    //     }\\n    // }\\n\\n    /**\\n     * @notice Checks if the liquidation should be allowed to occur\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param vestingContract Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param repayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        IVesting vestingContract,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external override returns (uint) {\\n        liquidator;   // currently unused\\n        borrower;     // currently unused\\n        repayAmount;  // currently unused\\n\\n        if (!markets[cTokenBorrowed].isListed || !vestingContractInfo[vestingContract].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n        // *may include Policy Hook-type checks\\n\\n        /* The borrower must have shortfall in order to be liquidatable */\\n        (Error err, , uint shortfall) = getAccountLiquidityInternal(borrower);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall == 0) {\\n            return uint(Error.INSUFFICIENT_SHORTFALL);\\n        }\\n\\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\\n        uint borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(borrower);\\n        (MathError mathErr, uint maxClose) = mulScalarTruncate(Exp({mantissa: closeFactorMantissa}), borrowBalance);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return uint(Error.MATH_ERROR);\\n        }\\n        if (repayAmount > maxClose) {\\n            return uint(Error.TOO_MUCH_REPAY);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates liquidateBorrow and reverts on rejection.\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param repayAmount The amount of underlying being repaid\\n     */\\n    // function liquidateBorrowVerify(\\n    //     address cTokenBorrowed,\\n    //     address cTokenCollateral,\\n    //     address liquidator,\\n    //     address borrower,\\n    //     uint repayAmount,\\n    //     uint seizeTokens) external override {\\n    //     cTokenBorrowed;   // currently unused\\n    //     cTokenCollateral; // currently unused\\n    //     liquidator;       // currently unused\\n    //     borrower;         // currently unused\\n    //     repayAmount;      // currently unused\\n    //     seizeTokens;      // currently unused\\n\\n    //     if (false) {\\n    //         maxAssets = maxAssets; // not pure\\n    //     }\\n    // }\\n\\n    /**\\n     * @notice Checks if the seizing of assets should be allowed to occur\\n     * @param vestingContractWrapper Asset which was used as collateral and will be seized\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeAllowed(\\n        address vestingContractWrapper,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) public override returns (uint) {\\n        liquidator;       // currently unused\\n        borrower;         // currently unused\\n        seizeTokens;      // currently unused\\n\\n        if (!vestingContractInfo[accountToVesting[borrower]].isListed || !markets[cTokenBorrowed].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (IVestingContractWrapper(vestingContractWrapper).comptroller() != CToken(cTokenBorrowed).comptroller()) {\\n            return uint(Error.COMPTROLLER_MISMATCH);\\n        }\\n\\n        // *may include Policy Hook-type checks\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates seize and reverts on rejection.\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    // function seizeVerify(\\n    //     address cTokenCollateral,\\n    //     address cTokenBorrowed,\\n    //     address liquidator,\\n    //     address borrower,\\n    //     uint seizeTokens) external override {\\n    //     cTokenCollateral; // currently unused\\n    //     cTokenBorrowed;   // currently unused\\n    //     liquidator;       // currently unused\\n    //     borrower;         // currently unused\\n    //     seizeTokens;      // currently unused\\n\\n    //     if (false) {\\n    //         maxAssets = maxAssets; // not pure\\n    //     }\\n    // }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\n     * @param cToken The market to verify the transfer against\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of cTokens to transfer\\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external override returns (uint) {\\n        cToken;         // currently unused\\n        src;            // currently unused\\n        dst;            // currently unused\\n        transferTokens; // currently unused\\n\\n        // *may include Policy Hook-type checks\\n\\n        // Currently the only consideration is whether or not\\n        //  the src is allowed to redeem this many tokens\\n        return redeemAllowedInternal(cToken, src, transferTokens);\\n    }\\n\\n    /**\\n     * @notice Validates transfer and reverts on rejection.\\n     * @param cToken Asset being transferred\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of cTokens to transfer\\n     */\\n    // function transferVerify(address cToken, address src, address dst, uint transferTokens) external override {\\n    //     cToken;         // currently unused\\n    //     src;            // currently unused\\n    //     dst;            // currently unused\\n    //     transferTokens; // currently unused\\n\\n    //     if (false) {\\n    //         maxAssets = maxAssets; // not pure\\n    //     }\\n    // }\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    /**\\n     * @notice Calculates the NPV of a collateral vesting contract for a given originalOwner\\n     * @param owner The original owner / recipient of the vesting Collateral\\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n     *          accountLiquidity)\\n     */\\n\\n    function vestingCalculateNPV(address owner) public override view returns (uint, uint256) {\\n\\n        IVestingContractWrapper _vestingWrapper = IVestingContractWrapper(vestingContractInfo[accountToVesting[owner]].vestingContractWrapper);\\n\\n        uint err;\\n        uint256 calculatedNPV;    \\n\\n        (err, calculatedNPV) = _vestingWrapper.getNPV(vestingNPVConfig.phaseOneCutoff,\\n            vestingNPVConfig.phaseTwoCutoff,\\n            vestingNPVConfig.phaseOneDiscountMantissa,\\n            vestingNPVConfig.phaseTwoDiscountMantissa,\\n            vestingNPVConfig.phaseThreeDiscountMantissa);\\n\\n        if (err != 0) {\\n            return (uint(Error.MATH_ERROR),0);\\n        } else {\\n            return (uint(Error.NO_ERROR), calculatedNPV);\\n        }   \\n\\n    }\\n\\n    /**\\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n     */\\n    struct AccountLiquidityLocalVars {\\n        uint sumCollateral;\\n        uint sumBorrowPlusEffects;\\n        uint cTokenBalance;\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n        uint oraclePriceMantissa;\\n        uint collateralNPV;\\n        Exp collateralFactor;\\n        Exp exchangeRate;\\n        Exp oraclePrice;\\n        Exp tokensToEther;\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0);\\n\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code,\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidityInternal(address account) internal view returns (Error, uint, uint) {\\n        return getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidityInternal(\\n        address account,\\n        CToken cTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount) internal view returns (Error, uint, uint) {\\n\\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\n        uint oErr;\\n        MathError mErr;\\n\\n        // Collateral vesting contract value calculation\\n        // collareral = NPV * collaralFactor * underlyingPrice (in Ether)\\n\\n        // calculate NPV of collateral (checks if account has vestingContract)\\n        (oErr, vars.collateralNPV)= vestingCalculateNPV(account);\\n        if (oErr != 0) {\\n            return (Error.MATH_ERROR, 0, 0);\\n        }\\n\\n        // Subtract amount owed to liquidators (in native token)\\n        if (vestingContractInfo[accountToVesting[account]].amountOwedToLiquidator > 0) {\\n            vars.collateralNPV = vars.collateralNPV.sub(vestingContractInfo[accountToVesting[account]].amountOwedToLiquidator);\\n        }\\n\\n        // get underlying price\\n        vars.oraclePriceMantissa = oracle.getPrice(vestingNPVConfig.underlyingAddress);\\n        if (vars.oraclePriceMantissa == 0) {\\n            return (Error.PRICE_ERROR, 0, 0);\\n        }\\n        vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\\n\\n\\n        vars.collateralFactor = Exp({mantissa: vestingNPVConfig.collateralFactorMantissa});\\n\\n        // calculate tokensToEther = collareralFactor * oraclePrice\\n        (mErr, vars.tokensToEther) = mulExp(vars.collateralFactor, vars.oraclePrice);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (Error.MATH_ERROR, 0, 0);\\n        }\\n\\n        // sumCollateral += tokensToEther * NPV Value\\n        (mErr, vars.sumCollateral) = mulScalarTruncateAddUInt(vars.tokensToEther, vars.collateralNPV, vars.sumCollateral);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (Error.MATH_ERROR, 0, 0);\\n        }\\n\\n\\n        // For each asset the account is in  -> will only apply to stablecoin side (i = 1)\\n        CToken[] memory assets = accountAssets[account];\\n        for (uint i = 0; i < assets.length; i++) {\\n            CToken asset = assets[i];\\n\\n            // Read the balances and exchange rate from the cToken\\n            (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(account);\\n            if (oErr != 0) { // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n                return (Error.SNAPSHOT_ERROR, 0, 0);\\n            }\\n            vars.collateralFactor = Exp({mantissa: markets[address(asset)].collateralFactorMantissa});\\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\\n\\n            // Get the normalized price of the asset\\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\\n            if (vars.oraclePriceMantissa == 0) {\\n                return (Error.PRICE_ERROR, 0, 0);\\n            }\\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\\n\\n\\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\n            (mErr, vars.tokensToEther) = mulExp3(vars.collateralFactor, vars.exchangeRate, vars.oraclePrice);\\n            if (mErr != MathError.NO_ERROR) {\\n                return (Error.MATH_ERROR, 0, 0);\\n            }\\n\\n            // sumCollateral += tokensToEther * cTokenBalance\\n            (mErr, vars.sumCollateral) = mulScalarTruncateAddUInt(vars.tokensToEther, vars.cTokenBalance, vars.sumCollateral);\\n            if (mErr != MathError.NO_ERROR) {\\n                return (Error.MATH_ERROR, 0, 0);\\n            }\\n\\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\\n            (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(vars.oraclePrice, vars.borrowBalance, vars.sumBorrowPlusEffects);\\n            if (mErr != MathError.NO_ERROR) {\\n                return (Error.MATH_ERROR, 0, 0);\\n            }\\n\\n            // Calculate effects of interacting with cTokenModify\\n            if (asset == cTokenModify) {\\n                // redeem effect\\n                // sumBorrowPlusEffects += tokensToEther * redeemTokens\\n                (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(vars.tokensToEther, redeemTokens, vars.sumBorrowPlusEffects);\\n                if (mErr != MathError.NO_ERROR) {\\n                    return (Error.MATH_ERROR, 0, 0);\\n                }\\n\\n                // borrow effect\\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\\n                (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(vars.oraclePrice, borrowAmount, vars.sumBorrowPlusEffects);\\n                if (mErr != MathError.NO_ERROR) {\\n                    return (Error.MATH_ERROR, 0, 0);\\n                }\\n            }\\n        }\\n\\n        // These are safe, as the underflow condition is checked first\\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\\n            return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\\n        } else {\\n            return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\\n     * @param cTokenBorrowed The address of the borrowed cToken\\n     * @param repayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\\n     */\\n    function liquidateCalculateSeizeTokens(address cTokenBorrowed, uint repayAmount) external override view returns (uint, uint) {\\n        /* Read oracle prices for borrowed and collateral markets */\\n        uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));\\n        uint priceCollateralMantissa = oracle.getPrice(vestingNPVConfig.underlyingAddress);\\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\n            return (uint(Error.PRICE_ERROR), 0);\\n        }\\n\\n        /*\\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\\n         *  seizeAmount = repayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\n         *  seizeTokens = seizeAmount\\n         *   = repayAmount * (liquidationIncentive * priceBorrowed) / priceCollateral\\n         */\\n        uint seizeTokens;\\n        Exp memory numerator;\\n        Exp memory ratio;\\n        MathError mathErr;\\n\\n        (mathErr, numerator) = mulExp(liquidationIncentiveMantissa, priceBorrowedMantissa);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0);\\n        }\\n\\n        (mathErr, ratio) = divExp(numerator, Exp({mantissa: priceCollateralMantissa}));\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0);\\n        }\\n\\n        (mathErr, seizeTokens) = mulScalarTruncate(ratio, repayAmount);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), seizeTokens);\\n    }\\n    \\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Sets a new price oracle for the comptroller\\n      * @dev Admin function to set a new price oracle\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint) {\\n        // Check caller is admin OR currently initialzing as new unitroller implementation\\n        if (!adminOrInitializing()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\\n        }\\n\\n        // Track the old oracle for the comptroller\\n        // PriceOracle oldOracle = oracle;\\n\\n        // Ensure invoke newOracle.isPriceOracle() returns true\\n        // require(newOracle.isPriceOracle(), \\\"oracle method isPriceOracle returned false\\\");\\n\\n        // Set comptroller's oracle to newOracle\\n        oracle = newOracle;\\n\\n        // Emit NewPriceOracle(oldOracle, newOracle)\\n        // emit NewPriceOracle(oldOracle, newOracle);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets the closeFactor used when liquidating borrows\\n      * @dev Admin function to set closeFactor\\n      * @param newCloseFactorMantissa New close factor, scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setCloseFactor(uint newCloseFactorMantissa) external returns (uint256) {\\n        // Check caller is admin OR currently initialzing as new unitroller implementation\\n        if (!adminOrInitializing()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_CLOSE_FACTOR_OWNER_CHECK);\\n        }\\n\\n        Exp memory newCloseFactorExp = Exp({mantissa: newCloseFactorMantissa});\\n        Exp memory lowLimit = Exp({mantissa: closeFactorMinMantissa});\\n        if (lessThanOrEqualExp(newCloseFactorExp, lowLimit)) {\\n            return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\\n        }\\n\\n        Exp memory highLimit = Exp({mantissa: closeFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newCloseFactorExp)) {\\n            return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\\n        }\\n\\n        // uint oldCloseFactorMantissa = closeFactorMantissa;\\n        closeFactorMantissa = newCloseFactorMantissa;\\n        // emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets the collateralFactor for a market\\n      * @dev Admin function to set per-market collateralFactor\\n      * @param cToken The market to set the factor on\\n      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) external returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(cToken)];\\n        if (!market.isListed) {\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\\n        }\\n\\n        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});\\n\\n        // Check collateral factor <= 0.9\\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\\n        }\\n\\n        // If collateral factor != 0, fail if price == 0\\n        if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\\n        }\\n\\n        // Set market's collateral factor to new collateral factor, remember old value\\n        // uint oldCollateralFactorMantissa = market.collateralFactorMantissa;\\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\\n\\n        // Emit event with asset, old collateral factor, and new collateral factor\\n        // emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets maxAssets which controls how many markets can be entered\\n      * @dev Admin function to set maxAssets\\n      * @param newMaxAssets New max assets\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setMaxAssets(uint newMaxAssets) external returns (uint) {\\n        // Check caller is admin OR currently initialzing as new unitroller implementation\\n        if (!adminOrInitializing()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_MAX_ASSETS_OWNER_CHECK);\\n        }\\n\\n        // uint oldMaxAssets = maxAssets;\\n        maxAssets = newMaxAssets;\\n        // emit NewMaxAssets(oldMaxAssets, newMaxAssets);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets liquidationIncentive\\n      * @dev Admin function to set liquidationIncentive\\n      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external returns (uint) {\\n        // Check caller is admin OR currently initialzing as new unitroller implementation\\n        if (!adminOrInitializing()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\\n        }\\n\\n        // Check de-scaled 1 <= newLiquidationDiscount <= 1.5\\n        Exp memory newLiquidationIncentive = Exp({mantissa: newLiquidationIncentiveMantissa});\\n        Exp memory minLiquidationIncentive = Exp({mantissa: liquidationIncentiveMinMantissa});\\n        if (lessThanExp(newLiquidationIncentive, minLiquidationIncentive)) {\\n            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\\n        }\\n\\n        Exp memory maxLiquidationIncentive = Exp({mantissa: liquidationIncentiveMaxMantissa});\\n        if (lessThanExp(maxLiquidationIncentive, newLiquidationIncentive)) {\\n            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\\n        }\\n\\n        // Save current value for use in log\\n        // uint oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\\n\\n        // Set liquidation incentive to new incentive\\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n        // Emit event with old incentive, new incentive\\n        // emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Add the market to the markets mapping and set it as listed\\n      * @dev Admin function to set isListed and add support for the market\\n      * @param cToken The address of the market (token) to list\\n      * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n      */\\n    function _supportMarket(CToken cToken) external returns (uint) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\\n        }\\n\\n        if (markets[address(cToken)].isListed) {\\n            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\\n        }\\n\\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\\n\\n        markets[address(cToken)] = Market({isListed: true, collateralFactorMantissa: 0});\\n        // emit MarketListed(cToken);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Add the vesting contract collateral and list as collateral\\n      * @dev Admin function to set isListed and add support for the market\\n      * @param _vestingContractAddress to list as collateral\\n      * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n      */\\n    function _supportCollateralVault(address _vestingContractAddress) external returns (uint) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\\n        }\\n\\n        IVesting _vestingContract = IVesting(_vestingContractAddress);\\n\\n        require(!vestingContractInfo[_vestingContract].isListed, \\\"Vault listed\\\");\\n\\n        // Sanity check to make sure its really a vesting contract\\n        _vestingContract.vestingBegin();\\n\\n        // Check if collateral vault is deployed for user\\n        VestingContractWrapper vestingContractWrapper;\\n        if (vestingContractInfo[_vestingContract].vestingContractWrapper == address(0)) {\\n            // Deploy vesting collateral wrapper\\n            vestingContractWrapper = new VestingContractWrapper(\\n                _vestingContract,\\n                this\\n            );\\n        }\\n\\n        vestingContractInfo[_vestingContract] = VestingContractInfo({\\n            isListed: true,\\n            enabledAsCollateral: false,\\n            vestingContractWrapper: address(vestingContractWrapper),\\n            unvestedTokenLiquidator: address(0),\\n            amountOwedToLiquidator: 0\\n        });\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice sets the VestingNPVConfigValues\\n      * @dev Admin function to set the VestingNPVConfig struct\\n      * @param _phaseOneCutoff value in block time for first phase \\n      * @param _phaseOneDiscountMantissa discount factor (e.g. 0.5) per phase in Mantissa\\n      * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n      */\\n    function _setVestingNPVConfig(\\n        address _underlyingAddress,\\n        uint256 _phaseOneCutoff,\\n        uint256 _phaseTwoCutoff,\\n        uint _phaseOneDiscountMantissa,\\n        uint _phaseTwoDiscountMantissa,\\n        uint _phaseThreeDiscountMantissa,\\n        uint _collateralFactorMantissa) external returns (uint) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\\n        }\\n\\n        require(_phaseOneCutoff <= _phaseTwoCutoff, \\\"phaseOneCutoff must be less than phaseTwo\\\");\\n\\n        require(_collateralFactorMantissa <= collateralFactorMaxMantissa, \\\"Collateral factor must be less than Max\\\");\\n        require(_collateralFactorMantissa >= closeFactorMinMantissa, \\\"Collateral factor must be greater than min\\\");\\n\\n        vestingNPVConfig.underlyingAddress = _underlyingAddress;\\n        vestingNPVConfig.phaseOneCutoff = _phaseOneCutoff;\\n        vestingNPVConfig.phaseTwoCutoff = _phaseTwoCutoff;\\n        vestingNPVConfig.phaseOneDiscountMantissa = _phaseOneDiscountMantissa;\\n        vestingNPVConfig.phaseTwoDiscountMantissa = _phaseTwoDiscountMantissa;\\n        vestingNPVConfig.phaseThreeDiscountMantissa = _phaseThreeDiscountMantissa;\\n        vestingNPVConfig.collateralFactorMantissa = _collateralFactorMantissa;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n\\n\\n    /**\\n     * @dev Check that caller is admin or this contract is initializing itself as\\n     * the new implementation.\\n     * There should be no way to satisfy msg.sender == comptrollerImplementaiton\\n     * without tx.origin also being admin, but both are included for extra safety\\n     */\\n    function adminOrInitializing() internal view returns (bool) {\\n        bool initializing = (\\n                msg.sender == comptrollerImplementation\\n                &&\\n                //solium-disable-next-line security/no-tx-origin\\n                tx.origin == admin\\n        );\\n        bool isAdmin = msg.sender == admin;\\n        return isAdmin || initializing;\\n    }\\n}\",\"keccak256\":\"0x35ba7a4c2fa9b45fccc6e5255612705b914ea8d644faef2e50f0a7b532a923bb\",\"license\":\"MIT\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./interfaces/IVesting.sol\\\";\\n\\nabstract contract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function registerVestingContract(address _vestingContractAddress) external virtual;\\n    function withdrawVestingContract(address _vestingContractAddress) external virtual;\\n\\n    function enterMarkets(address[] calldata cTokens) external virtual returns (uint[] memory);\\n    function exitMarket(address cToken) external virtual returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external virtual returns (uint);\\n    // function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external virtual;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external virtual returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external virtual;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external virtual returns (uint);\\n    // function borrowVerify(address cToken, address borrower, uint borrowAmount) external virtual;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external virtual returns (uint);\\n    // function repayBorrowVerify(\\n        // address cToken,\\n        // address payer,\\n        // address borrower,\\n        // uint repayAmount,\\n        // uint borrowerIndex) external virtual;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        IVesting vestingContract,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external virtual returns (uint);\\n    // function liquidateBorrowVerify(\\n        // address cTokenBorrowed,\\n        // address cTokenCollateral,\\n        // address liquidator,\\n        // address borrower,\\n        // uint repayAmount,\\n        // uint seizeTokens) external virtual;\\n\\n    function seizeAllowed(\\n        address vestingContractWrapper,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external virtual returns (uint);\\n    // function seizeVerify(\\n        // address cTokenCollateral,\\n        // address cTokenBorrowed,\\n        // address liquidator,\\n        // address borrower,\\n        // uint seizeTokens) external virtual;\\n    function seizeVestingTokens(\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens,\\n        IVesting vestingContract\\n    ) external virtual returns (uint);\\n    function liquidatorClaimOwedTokens(IVesting _vestingContract) external virtual;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external virtual returns (uint);\\n    // function transferVerify(address cToken, address src, address dst, uint transferTokens) external virtual;\\n\\n    function vestingCalculateNPV(address owner) external virtual view returns (uint, uint256);\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        uint repayAmount) external virtual view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0x6ada79a94ed21d304d8c736ddee1d57a5e8a454290996aca2ddbbd84de5f8530\",\"license\":\"MIT\"},\"contracts/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n    /**\\n    * @notice Administrator for this contract\\n    */\\n    address public admin;\\n\\n    /**\\n    * @notice Pending administrator for this contract\\n    */\\n    address public pendingAdmin;\\n\\n    /**\\n    * @notice Active brains of Unitroller\\n    */\\n    address public comptrollerImplementation;\\n\\n    /**\\n    * @notice Pending brains of Unitroller\\n    */\\n    address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint public closeFactorMantissa;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\n     */\\n    uint public liquidationIncentiveMantissa;\\n\\n    /**\\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n     */\\n    uint public maxAssets;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n     */\\n    mapping(address => CToken[]) public accountAssets;\\n\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n    struct Market {\\n        // Whether or not this market is listed\\n        bool isListed;\\n\\n        // Multiplier representing the most one can borrow against their collateral in this market.\\n        // For instance, 0.9 to allow borrowing 90% of collateral value.\\n        // Must be between 0 and 1, and stored as a mantissa.\\n        uint collateralFactorMantissa;\\n\\n        // Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address => bool) accountMembership;\\n\\n        // Whether or not this market receives COMP\\n        bool isComped;\\n    }\\n\\n    /**\\n     * @notice Official mapping of cTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     *  Actions which allow users to remove their own assets cannot be paused.\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n     */\\n    address public pauseGuardian;\\n    bool public _mintGuardianPaused;\\n    bool public _borrowGuardianPaused;\\n    bool public transferGuardianPaused;\\n    bool public seizeGuardianPaused;\\n    mapping(address => bool) public mintGuardianPaused;\\n    mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n    struct CompMarketState {\\n        // The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n\\n        // The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    // A list of all markets\\n    CToken[] public allMarkets;\\n\\n    // The rate at which the flywheel distributes COMP, per block\\n    uint public compRate;\\n\\n    /// @notice The portion of compRate that each market currently receives\\n    mapping(address => uint) public compSpeeds;\\n\\n    /// @notice The COMP market supply state for each market\\n    mapping(address => CompMarketState) public compSupplyState;\\n\\n    /// @notice The COMP market borrow state for each market\\n    mapping(address => CompMarketState) public compBorrowState;\\n\\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint)) public compSupplierIndex;\\n\\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint)) public compBorrowerIndex;\\n\\n    /// @notice The COMP accrued but not yet transferred to each user\\n    mapping(address => uint) public compAccrued;\\n}\\n\\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\\n    // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n    address public borrowCapGuardian;\\n\\n    // @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n    mapping(address => uint) public borrowCaps;\\n}\\n\\ncontract ComptrollerV5Storage is ComptrollerV4Storage {\\n    /// @notice The portion of COMP that each contributor receives per block\\n    mapping(address => uint) public compContributorSpeeds;\\n\\n    /// @notice Last block at which a contributor's COMP rewards have been allocated\\n    mapping(address => uint) public lastContributorBlock;\\n}\\n\\ncontract ComptrollerV6Storage is ComptrollerV5Storage {\\n    /// @notice The rate at which comp is distributed to the corresponding borrow market (per block)\\n    mapping(address => uint) public compBorrowSpeeds;\\n\\n    /// @notice The rate at which comp is distributed to the corresponding supply market (per block)\\n    mapping(address => uint) public compSupplySpeeds;\\n}\\n\\ncontract ComptrollerV7Storage is ComptrollerV6Storage {\\n    /// @notice Flag indicating whether the function to fix COMP accruals has been executed (RE: proposal 62 bug)\\n    bool public proposal65FixExecuted;\\n\\n    /// @notice Accounting storage mapping account addresses to how much COMP they owe the protocol.\\n    mapping(address => uint) public compReceivable;\\n}\\n\",\"keccak256\":\"0x281b89504a3d9dcf63bbc78c759b84592776e37eebc9ce1fca181f1f2d72c890\",\"license\":\"MIT\"},\"contracts/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return uint256\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return success\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return remaining\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\",\"keccak256\":\"0x3ad3c03c234c4505e5520476b54d7973fcf2b98bcd45a20796a120682871284e\",\"license\":\"MIT\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return success\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return remaining\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x0a624aa3110164e77743dc8c900b1be7af21d7efe01a82935a15b5ef60647473\",\"license\":\"MIT\"},\"contracts/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\",\"keccak256\":\"0xdce6e5bae86c83885d16bfe0944e296783c83d79967447703589c2a35fbd11f6\",\"license\":\"MIT\"},\"contracts/Exponential.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @dev Legacy contract for compatibility reasons with existing contracts that still use MathError\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath, ExponentialNoError {\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n}\\n\",\"keccak256\":\"0x9389e0414af76c2105c7f753d8be30948b8b5e64c0e24c305804a3cc19a61bc0\",\"license\":\"MIT\"},\"contracts/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale/2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) pure internal returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) pure internal returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\",\"keccak256\":\"0x2e6ff51c3c0f5e47676783f50e32419193b5bbffd9830e56ec7cdf5f4578ce62\",\"license\":\"MIT\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\nabstract contract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external virtual view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external virtual view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x5d43558f61ccc678a3b1f949d1c705ff24df675b8b7e764a611a1df91ef0498a\",\"license\":\"MIT\"},\"contracts/PreciseUnitMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG:\\n * - 9/21/20: Added safePower function\\n * - 4/21/21: Added approximatelyEquals function\\n * - 12/13/21: Added preciseDivCeil (int overloads) function\\n * - 12/13/21: Added abs function\\n */\\nlibrary PreciseUnitMath {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using SafeCast for int256;\\n\\n    // The number One in precise units.\\n    uint256 constant internal PRECISE_UNIT = 10 ** 18;\\n    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\\n\\n    // Max unsigned integer value\\n    uint256 constant internal MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 constant internal MAX_INT_256 = type(int256).max;\\n    int256 constant internal MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(b).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(b).div(PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(PRECISE_UNIT).div(b);\\n    }\\n\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(PRECISE_UNIT_INT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"Cant divide by 0\\\");\\n\\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0). When `a` is 0, 0 is\\n     * returned. When `b` is 0, method reverts with divide-by-zero error.\\n     */\\n    function preciseDivCeil(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"Cant divide by 0\\\");\\n\\n        if (a == 0 ) {\\n            return 0;\\n        } else if ((a > 0 && b > 0) || (a < 0 && b < 0)) {\\n            return a.mul(PRECISE_UNIT_INT).sub(1).div(b).add(1);\\n        } else {\\n            return a.mul(PRECISE_UNIT_INT).add(1).div(b).sub(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"Cant divide by 0\\\");\\n        require(a != MIN_INT_256 || b != -1, \\\"Invalid input\\\");\\n\\n        int256 result = a.div(b);\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\\n    }\\n\\n    /**\\n    * @dev Performs the power on a specified value, reverts on overflow.\\n    */\\n    function safePower(\\n        uint256 a,\\n        uint256 pow\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(a > 0, \\\"Value must be positive\\\");\\n\\n        uint256 result = 1;\\n        for (uint256 i = 0; i < pow; i++){\\n            uint256 previousResult = result;\\n\\n            // Using safemath multiplication prevents overflows\\n            result = previousResult.mul(a);\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns true if a =~ b within range, false otherwise.\\n     */\\n    function approximatelyEquals(uint256 a, uint256 b, uint256 range) internal pure returns (bool) {\\n        return a <= b.add(range) && a >= b.sub(range);\\n    }\\n\\n    /**\\n     * Returns the absolute value of int256 `a` as a uint256\\n     */\\n    function abs(int256 a) internal pure returns (uint) {\\n        return a >= 0 ? a.toUint256() : a.mul(-1).toUint256();\\n    }\\n}\\n\",\"keccak256\":\"0x1cf7413d1bb340bc6306de0c8a36941ec490d5a413bb55343c45c1f3da5af0a8\",\"license\":\"MIT\"},\"contracts/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./CToken.sol\\\";\\n\\nabstract contract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n      * @notice Get the underlying price of a cToken asset\\n      * @param cToken The cToken to get the underlying price of\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getUnderlyingPrice(CToken cToken) external view virtual returns (uint);\\n\\n    function getPrice(address asset) external view virtual returns (uint);\\n}\\n\",\"keccak256\":\"0xdb3617df1dc999473e3aa12199ec12eef4ef4ac87462587e84c105c166b79830\",\"license\":\"MIT\"},\"contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe6a9e335fc1103ecb06bdbc7159cb2c2b52a9eddfe1c04a794bd47967e7fccf5\",\"license\":\"MIT\"},\"contracts/VestingContractWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\nimport { IVesting } from \\\"./interfaces/IVesting.sol\\\";\\nimport { PreciseUnitMath } from \\\"./PreciseUnitMath.sol\\\";\\nimport { IVestingContractWrapper } from \\\"./interfaces/IVestingContractWrapper.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\n\\n\\n// Wrapper for a single vesting contract that stores tokens while user is borrowing using protocol.\\n// Each vesting vault must be added as enabled collateral in the Comptroller\\n// Note there will only be 1 vesting contract per borrower. There are edge cases if borrower withdraws and transfers recipient to \\n// another address and registers borrowing which will deploy a new VestingContractWrapper.\\n// Additionally, there may not be 2 vesting contracts for a single user, as that will overwrite accountToVesting to the latest vesting\\n// contract registered\\ncontract VestingContractWrapper is IVestingContractWrapper, ComptrollerErrorReporter, Exponential {\\n    using SafeMath for uint256;\\n    using PreciseUnitMath for uint256;\\n\\n    /*** STRUCT ***/\\n\\n    struct VestingNPVInfo {\\n        Exp phaseOneDiscount;\\n        Exp phaseTwoDiscount;\\n        Exp phaseThreeDiscount;\\n        uint256 timeRemaining;\\n        uint256 vestedAmount;\\n        uint256 unvestedAmount;\\n        uint256 liquidAmount;\\n    }\\n\\n    struct VestingNPVCalculations {\\n        uint256 presentValue;\\n        uint256 fullPhaseOneShare;\\n        uint256 fullPhaseTwoShare;\\n        uint256 partialPhaseTwoShare;\\n        uint256 partialPhaseThreeShare;\\n    }\\n\\n\\n    /*** STATE ***/\\n\\n    IVesting public override vestingContract;\\n    address public override originalRecipient;\\n    ComptrollerInterface public override comptroller;\\n\\n    // Store vesting contract parameters to save gas\\n    address public override vestingToken;\\n    uint256 public vestingAmount;\\n    uint256 public vestingEnd;\\n    uint256 public vestingBegin;\\n    uint256 public vestingCliff;\\n\\n    /*** CONSTRUCTOR ***/\\n\\n    constructor(IVesting _vestingContract, ComptrollerInterface _comptroller) public {\\n        // Set state\\n        vestingContract = _vestingContract;\\n        comptroller = _comptroller;\\n        vestingAmount = _vestingContract.vestingAmount();\\n        vestingToken = _vestingContract.vestingToken();\\n        vestingEnd = _vestingContract.vestingEnd();\\n        vestingBegin = _vestingContract.vestingBegin();\\n        vestingCliff = _vestingContract.vestingCliff();\\n        originalRecipient = _vestingContract.recipient();\\n\\n        // Get balance of on vesting contract\\n        uint256 balanceInVesting = IERC20(vestingToken).balanceOf(address(_vestingContract));\\n\\n        // Get vested but unclaimed amount\\n        uint256 vestedAmount = getVestedUnclaimedAmount();\\n        \\n        // Get claimed and liquid. Note: there are situations where users can send liquid tokens to this vesting contract\\n        // wrapper which will count towards NPV calculation\\n        uint256 liquidAmount = getLiquidAmount();\\n\\n        // Get unvested amount\\n        uint256 unvestedAmount = getUnvestedAmount();\\n\\n        // Balance of underlying must be greater than remaining as a validation. This assumes the vesting contract is immutable\\n        // therefore there is no possibility that a third party can remove funds and drain the balances in the vesting contract\\n        // after deployment\\n        require(liquidAmount.add(vestedAmount).add(unvestedAmount) < balanceInVesting);\\n\\n        // Approve max underlying tokens so Comptroller has ability to move funds from this contract\\n        IERC20(vestingToken).approve(address(comptroller), uint256(-1));\\n    }\\n\\n    // ONLY COMPTROLLER: Set recipient back to original\\n    function setOriginalRecipient() external override {\\n        require(msg.sender == address(comptroller), \\\"Must be comptroller\\\");\\n\\n        vestingContract.setRecipient(originalRecipient);\\n    }\\n\\n    /*** VIEW FUNCTIONS ***/\\n\\n    function getVestedUnclaimedAmount() public view override returns (uint256) {\\n        // If not past vesting cliff then return 0 as vested\\n        if (block.timestamp < vestingCliff) return 0;\\n\\n        if (block.timestamp >= vestingEnd) {\\n            return IERC20(vestingToken).balanceOf(address(vestingContract));\\n        } else {\\n            return vestingAmount.mul(block.timestamp.sub(vestingContract.lastUpdate())).div(vestingEnd.sub(vestingBegin));\\n        }\\n    }\\n\\n    function getLiquidAmount() public view override returns (uint256) {\\n        return IERC20(vestingToken).balanceOf(address(this));\\n    }\\n\\n    function getUnvestedAmount() public view override returns (uint256) {\\n        // If not past vesting cliff then return total vesting amount as unvested\\n        if (block.timestamp < vestingCliff) return vestingAmount;\\n\\n        if (block.timestamp >= vestingEnd) {\\n            return 0;\\n        } else {\\n            // To get unvested, sub current timestamp from the vesting end\\n            return vestingAmount.mul(vestingEnd.sub(block.timestamp)).div(vestingEnd.sub(vestingBegin));\\n        }\\n    }\\n\\n    function getNPV(\\n        uint256 _phaseOneCutoff,\\n        uint256 _phaseTwoCutoff,\\n        uint _phaseOneDiscountMantissa,\\n        uint _phaseTwoDiscountMantissa,\\n        uint _phaseThreeDiscountMantissa\\n    )\\n        external\\n        view\\n        override\\n        returns(uint, uint256)\\n    {\\n        // Calculates NPV of vesting contract by applying time horizon discount rates\\n        // We split over 3 time horizons (Phase1, Phase2, Phase3)\\n        // PhaseOneCutoff is the block period of time for which the _phaseOneDiscountMantissa is applied to\\n        // similar for PhaseTwo and PhaseThree\\n        \\n        // Assumes no one besides comptroller calls claim() after contract is registered with comptroller\\n        VestingNPVInfo memory vestingNPVInfo = VestingNPVInfo({\\n            phaseOneDiscount: Exp({mantissa: _phaseOneDiscountMantissa}),\\n            phaseTwoDiscount: Exp({mantissa: _phaseTwoDiscountMantissa}),\\n            phaseThreeDiscount: Exp({mantissa: _phaseThreeDiscountMantissa}),\\n            timeRemaining: vestingEnd.sub(block.timestamp),\\n            vestedAmount: getVestedUnclaimedAmount(),\\n            unvestedAmount: getUnvestedAmount(),\\n            liquidAmount: getLiquidAmount()\\n        });\\n\\n        VestingNPVCalculations memory vestingNPVCalculations = VestingNPVCalculations({\\n            presentValue: vestingNPVInfo.vestedAmount.add(vestingNPVInfo.liquidAmount), // Start present value at vested amount plus liquid amount\\n            fullPhaseOneShare: _phaseOneCutoff.preciseDiv(vestingNPVInfo.timeRemaining),\\n            fullPhaseTwoShare: _phaseTwoCutoff.sub(_phaseOneCutoff).preciseDiv(vestingNPVInfo.timeRemaining), // (Phase_2-Phase_1/time_remaining)\\n            partialPhaseTwoShare: vestingNPVInfo.timeRemaining.sub(_phaseOneCutoff).preciseDiv(vestingNPVInfo.timeRemaining),\\n            partialPhaseThreeShare: vestingNPVInfo.timeRemaining.sub(_phaseTwoCutoff).preciseDiv(vestingNPVInfo.timeRemaining)\\n        });\\n\\n        MathError mErr;\\n\\n        // If cliff not hit, no collateral is eligible yet\\n        if (block.timestamp < vestingCliff) return (uint(Error.NO_ERROR), 0);\\n\\n        // If full amount is vested, NPV is full amount of Contract\\n        if (block.timestamp >= vestingEnd) return (uint(Error.NO_ERROR), IERC20(vestingToken).balanceOf(address(vestingContract)));\\n\\n        if (vestingNPVInfo.timeRemaining <= _phaseOneCutoff) {\\n            // presentValue += unvestedAmount * phaseOneDiscount\\n            (mErr, vestingNPVCalculations.presentValue) = mulScalarTruncateAddUInt(\\n                vestingNPVInfo.phaseOneDiscount,\\n                vestingNPVInfo.unvestedAmount,\\n                vestingNPVCalculations.presentValue\\n            );\\n            \\n            if (mErr != MathError.NO_ERROR) {\\n                return (uint(Error.MATH_ERROR), 0);\\n            }\\n\\n        } else if (vestingNPVInfo.timeRemaining <= _phaseTwoCutoff) {\\n\\n\\n            // presentValue += unvestedAmount * (PhaseOneCutoff / timeRemaining) * phaseOneDiscount\\n            (mErr, vestingNPVCalculations.presentValue) = mulScalarTruncateAddUInt(\\n                vestingNPVInfo.phaseOneDiscount,\\n                vestingNPVInfo.unvestedAmount.preciseMul(vestingNPVCalculations.fullPhaseOneShare),\\n                vestingNPVCalculations.presentValue\\n            );\\n            if (mErr != MathError.NO_ERROR) {\\n                return (uint(Error.MATH_ERROR), 0);\\n            }\\n\\n            // presentValue += (unvestedAmount * (timeRemaining - PhaseOneCutoff) / timeRemaining)) * phaseTwoDiscount\\n            (mErr, vestingNPVCalculations.presentValue) = mulScalarTruncateAddUInt(\\n                vestingNPVInfo.phaseTwoDiscount,\\n                vestingNPVInfo.unvestedAmount.preciseMul(vestingNPVCalculations.partialPhaseTwoShare),\\n                vestingNPVCalculations.presentValue\\n            );\\n            if (mErr != MathError.NO_ERROR) {\\n                return (uint(Error.MATH_ERROR), 0);\\n            }\\n\\n        } else {\\n            // presentValue += unvestedAmount * (PhaseOneCutoff / timeRemaining) * phaseOneDiscount\\n            (mErr, vestingNPVCalculations.presentValue) = mulScalarTruncateAddUInt(\\n                vestingNPVInfo.phaseOneDiscount,\\n                vestingNPVInfo.unvestedAmount.preciseMul(vestingNPVCalculations.fullPhaseOneShare),\\n                vestingNPVCalculations.presentValue\\n            );\\n            if (mErr != MathError.NO_ERROR) {\\n                return (uint(Error.MATH_ERROR), 0);\\n            }\\n\\n            // presentValue += (unvestedAmount * (PhaseTwoCutoff - PhaseOneCutoff) / timeRemaining)  * phaseTwoDiscount\\n            (mErr, vestingNPVCalculations.presentValue) = mulScalarTruncateAddUInt(\\n                vestingNPVInfo.phaseTwoDiscount,\\n                vestingNPVInfo.unvestedAmount.preciseMul(vestingNPVCalculations.fullPhaseTwoShare),\\n                vestingNPVCalculations.presentValue\\n            );\\n            if (mErr != MathError.NO_ERROR) {\\n                return (uint(Error.MATH_ERROR), 0);\\n            }\\n\\n            // presentValue += (unvestedAmount * (timeRemaining - PhaseTwoCutoff) / timeRemaining)) * phaseThreeDiscount\\n            (mErr, vestingNPVCalculations.presentValue) = mulScalarTruncateAddUInt(\\n                vestingNPVInfo.phaseThreeDiscount,\\n                vestingNPVInfo.unvestedAmount.preciseMul(vestingNPVCalculations.partialPhaseThreeShare),\\n                vestingNPVCalculations.presentValue\\n            );\\n            if (mErr != MathError.NO_ERROR) {\\n                return (uint(Error.MATH_ERROR), 0);\\n            }\\n        }\\n\\n        return (uint(Error.NO_ERROR), vestingNPVCalculations.presentValue);\\n    }\\n}\",\"keccak256\":\"0x20713795ba56209c7fc07988cc989e32c94c08a36a66847f57311c74626856f5\",\"license\":\"MIT\"},\"contracts/interfaces/IVesting.sol\":{\"content\":\"// SPDX-License-Identifier: Apache License, Version 2.0\\npragma solidity 0.6.10;\\n\\ninterface IVesting {\\n    function recipient() external view returns(address);\\n    function vestingToken() external view returns(address);\\n    function vestingAmount() external view returns(uint256);\\n    function vestingBegin() external view returns(uint256);\\n    function vestingCliff() external view returns(uint256);\\n    function vestingEnd() external view returns(uint256);\\n    function lastUpdate() external view returns(uint256);\\n\\n    function setRecipient(address recipient_) external;\\n    function claim() external;\\n}\",\"keccak256\":\"0x5cbefb86bc509839d02ad089839fa0748eb28b1f9d4eae4bc26f8407911d1dd7\",\"license\":\"Apache License\"},\"contracts/interfaces/IVestingContractWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: Apache License, Version 2.0\\npragma solidity 0.6.10;\\n\\nimport \\\"./IVesting.sol\\\";\\nimport \\\"../ComptrollerInterface.sol\\\";\\n\\ninterface IVestingContractWrapper {\\n    function comptroller() external view returns(ComptrollerInterface);\\n    function getVestedUnclaimedAmount() external view returns(uint256);\\n    function getLiquidAmount() external view returns(uint256);\\n    function getUnvestedAmount() external view returns(uint256);\\n    function vestingContract() external view returns(IVesting);\\n    function originalRecipient() external view returns(address);\\n    function vestingToken() external view returns(address);\\n    function getNPV(uint256 phaseOneCutoff, uint256 phaseTwoCutoff, uint phaseOneDiscountMantissa, uint phaseTwoDiscountMantissa, uint phaseThreeDiscountMantissa) external view returns(uint, uint256);\\n\\n    function setOriginalRecipient() external;\\n}\",\"keccak256\":\"0xbf0bce2822930d2f28fea3054b0e64c14144e15f728b0638dc5892c601a935f6\",\"license\":\"Apache License\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600955600080546001600160a01b03191633179055615b45806100376000396000f3fe60806040523480156200001157600080fd5b50600436106200028b5760003560e01c80638e8f294b1162000165578063d02f735111620000d5578063dcfbc0c71162000093578063dcfbc0c71462000a08578063e4028eee1462000a12578063e87554461462000a41578063eabe7d911462000a4b578063ede4edd01462000a84578063f851a4401462000aad576200028b565b8063d02f7351146200090e578063d664848e1462000957578063d9226ced1462000980578063da3d454c14620009a0578063dce1544914620009d9576200028b565b8063bb82aa5e1162000123578063bb82aa5e14620007ca578063bdcdc25814620007d4578063c211afa91462000813578063c2998238146200083c578063c8bd45af14620008e5576200028b565b80638e8f294b14620006a7578063929fe9a114620006eb57806394b2294b146200071c578063a76b3fda1462000726578063abfceffc146200074f576200028b565b80634ef4c3e111620002015780635ec88c7911620001bf5780635ec88c7914620005745780635fc7e71e14620005bb5780636a61276714620006045780637625456f14620006515780637dc0d1d0146200069d576200028b565b80634ef4c3e114620004535780634fd42e17146200048c57806351dff98914620004ac57806355ee1fe114620004eb5780635d56b9511462000514576200028b565b8063317b0b77116200024f578063317b0b77146200037957806341e3400614620003995780634458305514620003e15780634ada90af14620004205780634b6d8087146200042a576200028b565b80627e3dd214620002905780631e846c1814620002ae5780631f42141514620002d957806324008a621462000314578063267822471462000353575b600080fd5b6200029a62000ab7565b604080519115158252519081900360200190f35b620002d760048036036020811015620002c657600080fd5b50356001600160a01b031662000abc565b005b6200030260048036036020811015620002f157600080fd5b50356001600160a01b031662000f53565b60408051918252519081900360200190f35b62000302600480360360808110156200032c57600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013562001167565b6200035d6200119f565b604080516001600160a01b039092168252519081900360200190f35b62000302600480360360208110156200039157600080fd5b5035620011ae565b620003c860048036036040811015620003b157600080fd5b506001600160a01b0381351690602001356200128b565b6040805192835260208301919091528051918290030190f35b6200030260048036036080811015620003f957600080fd5b506001600160a01b038135811691602081013582169160408201359160600135166200148b565b62000302620019fd565b620002d7600480360360208110156200044257600080fd5b50356001600160a01b031662001a03565b62000302600480360360608110156200046b57600080fd5b506001600160a01b0381358116916020810135909116906040013562001fb2565b6200030260048036036020811015620004a457600080fd5b503562001feb565b620002d760048036036080811015620004c457600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135620020b2565b62000302600480360360208110156200050357600080fd5b50356001600160a01b03166200210e565b6200053d600480360360208110156200052c57600080fd5b50356001600160a01b031662002151565b60408051951515865293151560208601526001600160a01b0392831685850152911660608401526080830152519081900360a00190f35b6200059d600480360360208110156200058c57600080fd5b50356001600160a01b031662002193565b60408051938452602084019290925282820152519081900360600190f35b62000302600480360360a0811015620005d357600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060800135620021cb565b62000302600480360360e08110156200061c57600080fd5b506001600160a01b038135169060208101359060408101359060608101359060808101359060a08101359060c0013562002365565b6200065b620024aa565b604080516001600160a01b0390981688526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b6200035d620024ce565b620006d060048036036020811015620006bf57600080fd5b50356001600160a01b0316620024dd565b60408051921515835260208301919091528051918290030190f35b6200029a600480360360408110156200070357600080fd5b506001600160a01b0381358116916020013516620024fc565b620003026200252f565b62000302600480360360208110156200073e57600080fd5b50356001600160a01b031662002535565b62000778600480360360208110156200076757600080fd5b50356001600160a01b031662002634565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015620007b65781810151838201526020016200079c565b505050509050019250505060405180910390f35b6200035d620026bf565b6200030260048036036080811015620007ec57600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135620026ce565b620002d7600480360360208110156200082b57600080fd5b50356001600160a01b0316620026dd565b62000778600480360360208110156200085457600080fd5b8101906020810181356401000000008111156200087057600080fd5b8201836020820111156200088357600080fd5b80359060200191846020830284011164010000000083111715620008a657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550620029f1945050505050565b6200035d60048036036020811015620008fd57600080fd5b50356001600160a01b031662002b75565b62000302600480360360a08110156200092657600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135909116906080013562002b90565b620003c8600480360360208110156200096f57600080fd5b50356001600160a01b031662002cef565b62000302600480360360208110156200099857600080fd5b503562002df3565b6200030260048036036060811015620009b857600080fd5b506001600160a01b0381358116916020810135909116906040013562002e1f565b6200035d60048036036040811015620009f157600080fd5b506001600160a01b03813516906020013562002fe6565b6200035d6200301c565b620003026004803603604081101562000a2a57600080fd5b506001600160a01b0381351690602001356200302b565b62000302620031a5565b620003026004803603606081101562000a6357600080fd5b506001600160a01b03813581169160208101359091169060400135620031ab565b620003026004803603602081101562000a9c57600080fd5b50356001600160a01b0316620031ba565b6200035d620034c7565b600181565b6002600954141562000b15576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026009556001600160a01b0381811660009081526012602052604090206001015416331462000b4457600080fd5b806001600160a01b0316634e71d92d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000b8057600080fd5b505af115801562000b95573d6000803e3d6000fd5b505050506000816001600160a01b03166319d152fa6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000bd557600080fd5b505afa15801562000bea573d6000803e3d6000fd5b505050506040513d602081101562000c0157600080fd5b50516001600160a01b038381166000908152601260209081526040918290205482516370a0823160e01b81526201000090910484166004820152915192909316926370a0823192602480840193829003018186803b15801562000c6357600080fd5b505afa15801562000c78573d6000803e3d6000fd5b505050506040513d602081101562000c8f57600080fd5b50516001600160a01b038316600090815260126020526040902060020154909150811062000df957816001600160a01b03166319d152fa6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000cf157600080fd5b505afa15801562000d06573d6000803e3d6000fd5b505050506040513d602081101562000d1d57600080fd5b50516001600160a01b038381166000908152601260209081526040808320805460029091015482516323b872dd60e01b815262010000909204861660048301523360248301526044820152905193909416936323b872dd9360648083019491928390030190829087803b15801562000d9457600080fd5b505af115801562000da9573d6000803e3d6000fd5b505050506040513d602081101562000dc057600080fd5b50506001600160a01b0382166000908152601260205260408120600281019190915560010180546001600160a01b031916905562000f4a565b816001600160a01b03166319d152fa6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000e3357600080fd5b505afa15801562000e48573d6000803e3d6000fd5b505050506040513d602081101562000e5f57600080fd5b50516001600160a01b0383811660009081526012602090815260408083205481516323b872dd60e01b8152620100009091048516600482015233602482015260448101879052905193909416936323b872dd9360648083019491928390030190829087803b15801562000ed157600080fd5b505af115801562000ee6573d6000803e3d6000fd5b505050506040513d602081101562000efd57600080fd5b50506001600160a01b03821660009081526012602052604090206002015462000f2d908263ffffffff620034d616565b6001600160a01b0383166000908152601260205260409020600201555b50506001600955565b600080546001600160a01b0316331462000f7d5762000f75600160126200351a565b905062001162565b6001600160a01b038216600090815260126020526040902054829060ff161562000fdd576040805162461bcd60e51b815260206004820152600c60248201526b15985d5b1d081b1a5cdd195960a21b604482015290519081900360640190fd5b806001600160a01b031663e29bc68b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200101757600080fd5b505afa1580156200102c573d6000803e3d6000fd5b505050506040513d60208110156200104357600080fd5b50506001600160a01b0381811660009081526012602052604081205490916201000090910416620010b65781306040516200107e906200420d565b6001600160a01b03928316815291166020820152604080519182900301906000f080158015620010b2573d6000803e3d6000fd5b5090505b6040805160a0810182526001808252600060208084018281526001600160a01b0387811686880190815260608701858152608088018681528b841687526012909552978520965187549351915160ff199094169015151761ff001916610100911515919091021762010000600160b01b0319166201000092821692909202919091178555945192840180546001600160a01b031916939095169290921790935551600290910155925050505b919050565b6001600160a01b03841660009081526011602052604081205460ff16620011915750600962001197565b60005b90505b949350505050565b6001546001600160a01b031681565b6000620011ba62003583565b620011cd5762000f75600160046200351a565b620011d76200421b565b506040805160208101909152828152620011f06200421b565b50604080516020810190915266b1a2bc2ec500008152620012128282620035cf565b156200122f57620012256005806200351a565b9250505062001162565b620012396200421b565b506040805160208101909152670c7d713b49da000081526200125c8184620035d7565b156200127a576200126f6005806200351a565b935050505062001162565b600585905560005b95945050505050565b600480546040805163fc57d4df60e01b81526001600160a01b038681169482019490945290516000938493849391169163fc57d4df91602480820192602092909190829003018186803b158015620012e257600080fd5b505afa158015620012f7573d6000803e3d6000fd5b505050506040513d60208110156200130e57600080fd5b505160048054600a54604080516341976e0960e01b81526001600160a01b0392831694810194909452519394506000939116916341976e09916024808301926020929190829003018186803b1580156200136757600080fd5b505afa1580156200137c573d6000803e3d6000fd5b505050506040513d60208110156200139357600080fd5b50519050811580620013a3575080155b15620013ba57600d93506000925062001484915050565b6000620013c66200421b565b620013d06200421b565b6000620013e060065487620035de565b935090506000816003811115620013f357fe5b146200140f57600b5b9750600096506200148495505050505050565b62001429836040518060200160405280888152506200361d565b9250905060008160038111156200143c57fe5b146200144a57600b620013fc565b62001456828a62003639565b9450905060008160038111156200146957fe5b146200147757600b620013fc565b6000975092955050505050505b9250929050565b600060026009541415620014e6576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026009556001600160a01b0380831660009081526012602052604081205490916200151d91620100009004163388888862002b90565b9050801562001561576040805162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b604482015290519081900360640190fd5b6001600160a01b03831660009081526012602052604090206002015415620015bb5760405162461bcd60e51b815260040180806020018281038252602281526020018062005acd6022913960400191505060405180910390fd5b856001600160a01b0316856001600160a01b0316141562001623576040805162461bcd60e51b815260206004820152601760248201527f426f72726f776572206973205f6c697175696461746f72000000000000000000604482015290519081900360640190fd5b826001600160a01b0316634e71d92d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200165f57600080fd5b505af115801562001674573d6000803e3d6000fd5b505050506000836001600160a01b03166319d152fa6040518163ffffffff1660e01b815260040160206040518083038186803b158015620016b457600080fd5b505afa158015620016c9573d6000803e3d6000fd5b505050506040513d6020811015620016e057600080fd5b50516001600160a01b038581166000908152601260209081526040918290205482516370a0823160e01b81526201000090910484166004820152915192909316926370a0823192602480840193829003018186803b1580156200174257600080fd5b505afa15801562001757573d6000803e3d6000fd5b505050506040513d60208110156200176e57600080fd5b505190508085116200188957836001600160a01b03166319d152fa6040518163ffffffff1660e01b815260040160206040518083038186803b158015620017b457600080fd5b505afa158015620017c9573d6000803e3d6000fd5b505050506040513d6020811015620017e057600080fd5b50516001600160a01b0385811660009081526012602090815260408083205481516323b872dd60e01b815262010000909104851660048201528c85166024820152604481018b9052905193909416936323b872dd9360648083019491928390030190829087803b1580156200185457600080fd5b505af115801562001869573d6000803e3d6000fd5b505050506040513d60208110156200188057600080fd5b50620019eb9050565b836001600160a01b03166319d152fa6040518163ffffffff1660e01b815260040160206040518083038186803b158015620018c357600080fd5b505afa158015620018d8573d6000803e3d6000fd5b505050506040513d6020811015620018ef57600080fd5b50516001600160a01b0385811660009081526012602090815260408083205481516323b872dd60e01b815262010000909104851660048201528c8516602482015260448101879052905193909416936323b872dd9360648083019491928390030190829087803b1580156200196357600080fd5b505af115801562001978573d6000803e3d6000fd5b505050506040513d60208110156200198f57600080fd5b50506001600160a01b03848116600090815260126020526040902060010180546001600160a01b031916918916919091179055620019ce8582620034d6565b6001600160a01b0385166000908152601260205260409020600201555b60006001600955979650505050505050565b60065481565b6001600160a01b038082166000908152601260209081526040808320548151630478051760e51b8152915186956201000090920490911692638f00a2e09260048082019391829003018186803b15801562001a5d57600080fd5b505afa15801562001a72573d6000803e3d6000fd5b505050506040513d602081101562001a8957600080fd5b50516001600160a01b038084166000818152601260209081526040918290205482516319b400eb60e21b815292519596506201000090049093169391926366d003ac92600480840193829003018186803b15801562001ae757600080fd5b505afa15801562001afc573d6000803e3d6000fd5b505050506040513d602081101562001b1357600080fd5b50516001600160a01b03161462001b5c5760405162461bcd60e51b815260040180806020018281038252602681526020018062005a086026913960400191505060405180910390fd5b6001600160a01b038116331462001ba55760405162461bcd60e51b815260040180806020018281038252602181526020018062005aef6021913960400191505060405180910390fd5b3360009081526008602090815260409182902080548351818402810184019094528084526060939283018282801562001c0857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001be9575b50939450600093505050505b815181101562001d1657600082828151811062001c2d57fe5b602002602001015190506000816001600160a01b031663c37f68e2336040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060806040518083038186803b15801562001c9057600080fd5b505afa15801562001ca5573d6000803e3d6000fd5b505050506040513d608081101562001cbc57600080fd5b50604001519050801562001d0b576040805162461bcd60e51b8152602060048201526011602482015270135d5cdd081c185e481bd999881919589d607a1b604482015290519081900360640190fd5b505060010162001c14565b506001600160a01b0383166000908152601260205260409020600201541562001d715760405162461bcd60e51b815260040180806020018281038252602281526020018062005acd6022913960400191505060405180910390fd5b6001600160a01b038084166000818152601260208181526040808420805461ff00191681553385526013835281852080546001600160a01b031916905594845291905291548251634d3fc32d60e01b815292516201000090910490931692634d3fc32d92600480820193929182900301818387803b15801562001df357600080fd5b505af115801562001e08573d6000803e3d6000fd5b505050506000836001600160a01b03166319d152fa6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001e4857600080fd5b505afa15801562001e5d573d6000803e3d6000fd5b505050506040513d602081101562001e7457600080fd5b50516001600160a01b0385811660009081526012602090815260408083205481516370a0823160e01b8152620100009091048516600482015290519495509193928516926370a08231926024808201939291829003018186803b15801562001edb57600080fd5b505afa15801562001ef0573d6000803e3d6000fd5b505050506040513d602081101562001f0757600080fd5b50516001600160a01b0386811660009081526012602090815260408083205481516323b872dd60e01b815262010000909104851660048201528985166024820152604481018690529051949550928616936323b872dd93606480820194918390030190829087803b15801562001f7c57600080fd5b505af115801562001f91573d6000803e3d6000fd5b505050506040513d602081101562001fa857600080fd5b5050505050505050565b6001600160a01b03831660009081526011602052604081205460ff1662001fde5760095b905062001fe4565b60005b90505b9392505050565b600062001ff762003583565b6200200a5762000f756001600b6200351a565b620020146200421b565b5060408051602081019091528281526200202d6200421b565b506040805160208101909152670de0b6b3a76400008152620020508282620035d7565b156200206457620012256007600c6200351a565b6200206e6200421b565b5060408051602081019091526714d1120d7b1600008152620020918184620035d7565b15620020a5576200126f6007600c6200351a565b6006859055600062001282565b80158015620020c15750600082115b1562002108576040805162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b604482015290519081900360640190fd5b50505050565b60006200211a62003583565b6200212d5762000f75600160106200351a565b600480546001600160a01b0319166001600160a01b03841617905560005b92915050565b60126020526000908152604090208054600182015460029092015460ff808316936101008404909116926001600160a01b036201000090910481169291169085565b600080600080600080620021ac87600080600062003695565b925092509250826011811115620021bf57fe5b97919650945092505050565b6001600160a01b03851660009081526011602052604081205460ff1615806200220d57506001600160a01b03851660009081526012602052604090205460ff16155b156200221e5760095b905062001282565b6000806200222c8562003ce5565b919350909150600090508260118111156200224357fe5b1462002260578160118111156200225657fe5b9250505062001282565b806200226e57600362002256565b6000886001600160a01b03166395dd9193876040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015620022c757600080fd5b505afa158015620022dc573d6000803e3d6000fd5b505050506040513d6020811015620022f357600080fd5b505160408051602081019091526005548152909150600090819062002319908462003639565b909250905060008260038111156200232d57fe5b146200234357600b5b9550505050505062001282565b808711156200235457601162002336565b5060009a9950505050505050505050565b600080546001600160a01b031633146200238f5762002387600160126200351a565b90506200249f565b85871115620023d05760405162461bcd60e51b815260040180806020018281038252602981526020018062005a2e6029913960400191505060405180910390fd5b670c7d713b49da0000821115620024195760405162461bcd60e51b815260040180806020018281038252602781526020018062005a576027913960400191505060405180910390fd5b66b1a2bc2ec50000821015620024615760405162461bcd60e51b815260040180806020018281038252602a81526020018062005aa3602a913960400191505060405180910390fd5b600a80546001600160a01b0319166001600160a01b038a16179055600e879055600f869055600b859055600c849055600d8390556010829055600090505b979650505050505050565b600a54600b54600c54600d54600e54600f546010546001600160a01b039096169587565b6004546001600160a01b031681565b6011602052600090815260409020805460019091015460ff9091169082565b6001600160a01b038082166000908152601160209081526040808320938616835260029093019052205460ff1692915050565b60075481565b600080546001600160a01b03163314620025575762000f75600160126200351a565b6001600160a01b03821660009081526011602052604090205460ff1615620025875762000f75600a60116200351a565b816001600160a01b031663fe9c44ae6040518163ffffffff1660e01b815260040160206040518083038186803b158015620025c157600080fd5b505afa158015620025d6573d6000803e3d6000fd5b505050506040513d6020811015620025ed57600080fd5b50506040805180820182526001808252600060208084018281526001600160a01b038816835260119091529381209251835460ff191690151517835592519101556200214b565b60608060086000846001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015620026b257602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162002693575b5093979650505050505050565b6002546001600160a01b031681565b60006200119485858462003d07565b6001600160a01b038116600090815260126020526040902054819060ff166200273e576040805162461bcd60e51b815260206004820152600e60248201526d135d5cdd081899481b1a5cdd195960921b604482015290519081900360640190fd5b6001600160a01b038116600090815260126020526040902054610100900460ff1615620027a8576040805162461bcd60e51b8152602060048201526013602482015272135d5cdd081b9bdd08189948195b98589b1959606a1b604482015290519081900360640190fd5b306001600160a01b0316816001600160a01b03166366d003ac6040518163ffffffff1660e01b815260040160206040518083038186803b158015620027ec57600080fd5b505afa15801562002801573d6000803e3d6000fd5b505050506040513d60208110156200281857600080fd5b50516001600160a01b03161462002876576040805162461bcd60e51b815260206004820152601d60248201527f526563697069656e74206d75737420626520436f6d7074726f6c6c6572000000604482015290519081900360640190fd5b6001600160a01b03818116600090815260126020908152604091829020548251630478051760e51b8152925133946201000090920490911692638f00a2e0926004808301939192829003018186803b158015620028d257600080fd5b505afa158015620028e7573d6000803e3d6000fd5b505050506040513d6020811015620028fe57600080fd5b50516001600160a01b031614620029475760405162461bcd60e51b815260040180806020018281038252602181526020018062005aef6021913960400191505060405180910390fd5b6001600160a01b038082166000818152601260208181526040808420805461ff0019166101001781553385526013835281852080546001600160a01b0319168717905585855292909152905481516301ddf6a560e51b8152620100009091049094166004850152519192633bbed4a0926024808301939282900301818387803b158015620029d457600080fd5b505af1158015620029e9573d6000803e3d6000fd5b505050505050565b8051606090818167ffffffffffffffff8111801562002a0f57600080fd5b5060405190808252806020026020018201604052801562002a3a578160200160208202803683370190505b50905060005b8281101562002b6d57600085828151811062002a5857fe5b6020908102919091018101516001600160a01b03811660009081526011909252604090912080549192509060ff1662002aaf5760095b84848151811062002a9b57fe5b602002602001018181525050505062002b64565b33600090815260028201602052604090205460ff1615156001141562002ad757600062002a8e565b600754336000908152600860205260409020541062002af857601062002a8e565b33600090815260028201602090815260408083208054600160ff199091168117909155600883529083208054918201815583529082200180546001600160a01b0319166001600160a01b03851617905584848151811062002b5557fe5b60200260200101818152505050505b60010162002a40565b509392505050565b6013602052600090815260409020546001600160a01b031681565b6001600160a01b038083166000908152601360209081526040808320549093168252601290529081205460ff16158062002be357506001600160a01b03851660009081526011602052604090205460ff16155b1562002bf157600962002216565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b15801562002c2b57600080fd5b505afa15801562002c40573d6000803e3d6000fd5b505050506040513d602081101562002c5757600080fd5b505160408051635fe3b56760e01b815290516001600160a01b0392831692891691635fe3b567916004808301926020929190829003018186803b15801562002c9e57600080fd5b505afa15801562002cb3573d6000803e3d6000fd5b505050506040513d602081101562002cca57600080fd5b50516001600160a01b03161462002ce357600262002216565b60009695505050505050565b6001600160a01b0380821660009081526013602090815260408083205484168352601290915280822054600e54600f54600b54600c54600d54865163687e851d60e11b81526004810195909552602485019390935260448401919091526064830152608482015282519394859462010000909304169284928392859263d0fd0a3a9260a480840193829003018186803b15801562002d8c57600080fd5b505afa15801562002da1573d6000803e3d6000fd5b505050506040513d604081101562002db857600080fd5b5080516020909101519092509050811562002ddf57600b94506000935062002dee92505050565b60009450925062002dee915050565b915091565b600062002dff62003583565b62002e125762000f756001600d6200351a565b600782905560006200214b565b6001600160a01b03831660009081526011602052604081205460ff1662002e4857600962001fd6565b6001600160a01b038085166000908152601160209081526040808320938716835260029093019052205460ff1662002e8257600862001fd6565b6001600160a01b038381166000908152601360209081526040808320549093168252601290522054610100900460ff1662002f04576040805162461bcd60e51b815260206004820152601960248201527f4e6f7420656e61626c656420617320636f6c6c61746572616c00000000000000604482015290519081900360640190fd5b600480546040805163fc57d4df60e01b81526001600160a01b03888116948201949094529051929091169163fc57d4df91602480820192602092909190829003018186803b15801562002f5657600080fd5b505afa15801562002f6b573d6000803e3d6000fd5b505050506040513d602081101562002f8257600080fd5b505162002f9157600d62001fd6565b60008062002fa3858760008762003695565b9193509091506000905082601181111562002fba57fe5b1462002fd75781601181111562002fcd57fe5b9250505062001fe4565b801562002ce357600462002fcd565b600860205281600052604060002081815481106200300057fe5b6000918252602090912001546001600160a01b03169150829050565b6003546001600160a01b031681565b600080546001600160a01b0316331462003055576200304d600160066200351a565b90506200214b565b6001600160a01b0383166000908152601160205260409020805460ff166200308e5762003085600960076200351a565b9150506200214b565b620030986200421b565b506040805160208101909152838152620030b16200421b565b506040805160208101909152670c7d713b49da00008152620030d48183620035d7565b15620030f357620030e8600660086200351a565b93505050506200214b565b8415801590620031805750600480546040805163fc57d4df60e01b81526001600160a01b038a8116948201949094529051929091169163fc57d4df91602480820192602092909190829003018186803b1580156200315057600080fd5b505afa15801562003165573d6000803e3d6000fd5b505050506040513d60208110156200317c57600080fd5b5051155b156200319457620030e8600d60096200351a565b505060010191909155506000919050565b60055481565b600062001fe184848462003d07565b6000808290506000806000836001600160a01b031663c37f68e2336040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060806040518083038186803b1580156200321c57600080fd5b505afa15801562003231573d6000803e3d6000fd5b505050506040513d60808110156200324857600080fd5b5080516020820151604090920151909450909250905082156200329d5760405162461bcd60e51b815260040180806020018281038252602581526020018062005a7e6025913960400191505060405180910390fd5b8015620032be57620032b2600c60026200351a565b94505050505062001162565b6000620032cd87338562003d07565b90508015620032f257620032e5600e60038362003d7c565b9550505050505062001162565b6001600160a01b0385166000908152601160209081526040808320338452600281019092529091205460ff1662003333576000965050505050505062001162565b3360009081526002820160209081526040808320805460ff191690556008825291829020805483518184028101840190945280845260609392830182828015620033a757602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162003388575b5050835193945083925060009150505b828110156200340157896001600160a01b0316848281518110620033d757fe5b60200260200101516001600160a01b03161415620033f85780915062003401565b600101620033b7565b508181106200340c57fe5b3360009081526008602052604090208054819060001981019081106200342e57fe5b9060005260206000200160009054906101000a90046001600160a01b03168183815481106200345957fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550808054806200349257fe5b600082815260208120820160001990810180546001600160a01b03191690559091019091559c9b505050505050505050505050565b6000546001600160a01b031681565b600062001fe483836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f770081525062003de5565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa08360118111156200354a57fe5b8360138111156200355757fe5b604080519283526020830191909152600082820152519081900360600190a182601181111562001fe457fe5b60025460009081906001600160a01b031633148015620035ad57506000546001600160a01b031632145b6000549091506001600160a01b031633148080620035c85750815b9250505090565b519051111590565b5190511090565b6000620035ea6200421b565b6200361260405180602001604052808681525060405180602001604052808681525062003e80565b915091509250929050565b6000620036296200421b565b8351835162003612919062003f7a565b6000806000620036486200421b565b62003654868662004037565b909250905060008260038111156200366857fe5b146200367b575091506000905062001484565b60006200368882620040a6565b9350935050509250929050565b6000806000620036a46200422e565b600080620036b28a62002cef565b60c085015291508115620036d55750600b94506000935083925062003cdb915050565b6001600160a01b03808b166000908152601360209081526040808320549093168252601290522060020154156200374d576001600160a01b03808b16600090815260136020908152604080832054909316825260129052206002015460c0840151620037479163ffffffff620034d616565b60c08401525b60048054600a54604080516341976e0960e01b81526001600160a01b0392831694810194909452519116916341976e09916024808301926020929190829003018186803b1580156200379e57600080fd5b505afa158015620037b3573d6000803e3d6000fd5b505050506040513d6020811015620037ca57600080fd5b505160a08401819052620037ed5750600d94506000935083925062003cdb915050565b604080516020808201835260a0860151825261012086019182528251908101909252601054825260e085018290525162003828919062003e80565b610140850152905060008160038111156200383f57fe5b146200385a5750600b94506000935083925062003cdb915050565b620038748361014001518460c001518560000151620040b5565b8452905060008160038111156200388757fe5b14620038a25750600b94506000935083925062003cdb915050565b6001600160a01b038a166000908152600860209081526040918290208054835181840281018401909452808452606093928301828280156200390e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620038ef575b50939450600093505050505b815181101562003c935760008282815181106200393357fe5b60200260200101519050806001600160a01b031663c37f68e28e6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060806040518083038186803b1580156200399457600080fd5b505afa158015620039a9573d6000803e3d6000fd5b505050506040513d6080811015620039c057600080fd5b508051602082015160408084015160609485015160808c0152938a0193909352918801919091529450841562003a085750600f97506000965086955062003cdb945050505050565b60408051602080820183526001600160a01b0380851660008181526011845285902060010154845260e08b01939093528351808301855260808b015181526101008b015260048054855163fc57d4df60e01b815291820194909452935192169263fc57d4df9260248083019392829003018186803b15801562003a8a57600080fd5b505afa15801562003a9f573d6000803e3d6000fd5b505050506040513d602081101562003ab657600080fd5b505160a0870181905262003adc5750600d97506000965086955062003cdb945050505050565b604080516020810190915260a08701518152610120870181905260e087015161010088015162003b0c926200411c565b6101408801529350600084600381111562003b2357fe5b1462003b415750600b97506000965086955062003cdb945050505050565b62003b5b86610140015187604001518860000151620040b5565b87529350600084600381111562003b6e57fe5b1462003b8c5750600b97506000965086955062003cdb945050505050565b62003ba686610120015187606001518860200151620040b5565b60208801529350600084600381111562003bbc57fe5b1462003bda5750600b97506000965086955062003cdb945050505050565b8b6001600160a01b0316816001600160a01b0316141562003c895762003c0b8661014001518c8860200151620040b5565b60208801529350600084600381111562003c2157fe5b1462003c3f5750600b97506000965086955062003cdb945050505050565b62003c558661012001518b8860200151620040b5565b60208801529350600084600381111562003c6b57fe5b1462003c895750600b97506000965086955062003cdb945050505050565b506001016200391a565b5060208401518451111562003cbc57505050602081015190516000945003915082905062003cdb565b505081516020909201516000955085945091909103915062003cdb9050565b9450945094915050565b600080600062003cfa84600080600062003695565b9250925092509193909250565b6001600160a01b03831660009081526011602052604081205460ff1662003d3057600962001fd6565b6001600160a01b038085166000908152601160209081526040808320938716835260029093019052205460ff1662003d6a57600062001fd6565b60008062002fa3858786600062003695565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa084601181111562003dac57fe5b84601381111562003db957fe5b604080519283526020830191909152818101859052519081900360600190a183601181111562001fe157fe5b6000818484111562003e785760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101562003e3c57818101518382015260200162003e22565b50505050905090810190601f16801562003e6a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600062003e8c6200421b565b60008062003ea38660000151866000015162004171565b9092509050600082600381111562003eb757fe5b1462003ed85750604080516020810190915260008152909250905062001484565b60008062003eef6706f05b59d3b2000084620041b6565b9092509050600082600381111562003f0357fe5b1462003f28578160405180602001604052806000815250955095505050505062001484565b60008062003f3f83670de0b6b3a7640000620041df565b9092509050600082600381111562003f5357fe5b1462003f5b57fe5b604080516020810190915290815260009a909950975050505050505050565b600062003f866200421b565b60008062003f9d86670de0b6b3a764000062004171565b9092509050600082600381111562003fb157fe5b1462003fd25750604080516020810190915260008152909250905062001484565b60008062003fe18388620041df565b9092509050600082600381111562003ff557fe5b146200401a578160405180602001604052806000815250955095505050505062001484565b604080516020810190915290815260009890975095505050505050565b6000620040436200421b565b6000806200405686600001518662004171565b909250905060008260038111156200406a57fe5b146200408b5750604080516020810190915260008152909250905062001484565b60408051602081019091529081526000969095509350505050565b51670de0b6b3a7640000900490565b6000806000620040c46200421b565b620040d0878762004037565b90925090506000826003811115620040e457fe5b14620040f7575091506000905062004114565b6200410d6200410682620040a6565b86620041b6565b9350935050505b935093915050565b6000620041286200421b565b6000620041346200421b565b62004140878762003e80565b909250905060008260038111156200415457fe5b146200416557909250905062004114565b6200410d818662003e80565b60008083620041865750600090508062001484565b838302838582816200419457fe5b0414620041aa5750600291506000905062001484565b60009250905062001484565b600080838301848110620041d05760009250905062001484565b50600291506000905062001484565b60008082620041f5575060019050600062001484565b60008385816200420157fe5b04915091509250929050565b61176080620042a883390190565b6040518060200160405280600081525090565b60405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001620042756200421b565b8152602001620042846200421b565b8152602001620042936200421b565b8152602001620042a26200421b565b90529056fe60806040523480156200001157600080fd5b506040516200176038038062001760833981810160405260408110156200003757600080fd5b508051602091820151600080546001600160a01b038085166001600160a01b03199283168117909355600280549185169190921617905560408051623947bb60e11b8152905193949293919262728f7692600480840193829003018186803b158015620000a357600080fd5b505afa158015620000b8573d6000803e3d6000fd5b505050506040513d6020811015620000cf57600080fd5b5051600490815560408051630ce8a97d60e11b815290516001600160a01b038516926319d152fa92808201926020929091829003018186803b1580156200011557600080fd5b505afa1580156200012a573d6000803e3d6000fd5b505050506040513d60208110156200014157600080fd5b5051600380546001600160a01b0319166001600160a01b03928316179055604080516384a1931f60e01b81529051918416916384a1931f91600480820192602092909190829003018186803b1580156200019a57600080fd5b505afa158015620001af573d6000803e3d6000fd5b505050506040513d6020811015620001c657600080fd5b50516005556040805163e29bc68b60e01b815290516001600160a01b0384169163e29bc68b916004808301926020929190829003018186803b1580156200020c57600080fd5b505afa15801562000221573d6000803e3d6000fd5b505050506040513d60208110156200023857600080fd5b505160065560408051633cd9039d60e21b815290516001600160a01b0384169163f3640e74916004808301926020929190829003018186803b1580156200027e57600080fd5b505afa15801562000293573d6000803e3d6000fd5b505050506040513d6020811015620002aa57600080fd5b5051600755604080516319b400eb60e21b815290516001600160a01b038416916366d003ac916004808301926020929190829003018186803b158015620002f057600080fd5b505afa15801562000305573d6000803e3d6000fd5b505050506040513d60208110156200031c57600080fd5b5051600180546001600160a01b0319166001600160a01b03928316179055600354604080516370a0823160e01b81528584166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b1580156200038457600080fd5b505afa15801562000399573d6000803e3d6000fd5b505050506040513d6020811015620003b057600080fd5b505190506000620003c96001600160e01b03620004ce16565b90506000620003e06001600160e01b036200066016565b90506000620003f76001600160e01b03620006df16565b9050836200042d826200041986866200074b60201b6200087d1790919060201c565b6200074b60201b6200087d1790919060201c565b106200043857600080fd5b6003546002546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b1580156200049357600080fd5b505af1158015620004a8573d6000803e3d6000fd5b505050506040513d6020811015620004bf57600080fd5b50620009a59650505050505050565b6000600754421015620004e4575060006200065d565b60055442106200057557600354600054604080516370a0823160e01b81526001600160a01b039283166004820152905191909216916370a08231916024808301926020929190829003018186803b1580156200053f57600080fd5b505afa15801562000554573d6000803e3d6000fd5b505050506040513d60208110156200056b57600080fd5b505190506200065d565b6200065a62000597600654600554620007af60201b620008e01790919060201c565b620006466200062f6000809054906101000a90046001600160a01b03166001600160a01b031663c04637116040518163ffffffff1660e01b815260040160206040518083038186803b158015620005ed57600080fd5b505afa15801562000602573d6000803e3d6000fd5b505050506040513d60208110156200061957600080fd5b50514290620007af602090811b620008e017901c565b600454620007f960201b620009221790919060201c565b6200085760201b6200097b1790919060201c565b90505b90565b600354604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015620006ac57600080fd5b505afa158015620006c1573d6000803e3d6000fd5b505050506040513d6020811015620006d857600080fd5b5051905090565b6000600754421015620006f657506004546200065d565b600554421062000709575060006200065d565b6200065a6200072b600654600554620007af60201b620008e01790919060201c565b620006466200062f42600554620007af60201b620008e01790919060201c565b600082820183811015620007a6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000620007a683836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250620008a160201b60201c565b6000826200080a57506000620007a9565b828202828482816200081857fe5b0414620007a65760405162461bcd60e51b81526004018080602001828103825260218152602001806200173f6021913960400191505060405180910390fd5b6000620007a683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506200093c60201b60201c565b60008184841115620009345760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620008f8578181015183820152602001620008de565b50505050905090810190601f168015620009265780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836200098e5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315620008f8578181015183820152602001620008de565b5060008385816200099b57fe5b0495945050505050565b610d8a80620009b56000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80635fe3b5671161008c578063d0fd0a3a11610066578063d0fd0a3a1461014b578063e29bc68b14610199578063e7c2a608146101a1578063f3640e74146101a9576100ce565b80635fe3b5671461013357806384a1931f1461013b5780638f00a2e014610143576100ce565b8062728f76146100d35780631845dc3a146100ed57806319d152fa146100f557806328fc08f3146101195780634d3fc32d146101215780635e6f60451461012b575b600080fd5b6100db6101b1565b60408051918252519081900360200190f35b6100db6101b7565b6100fd61031e565b604080516001600160a01b039092168252519081900360200190f35b6100db61032d565b6101296103a9565b005b6100fd610466565b6100fd610475565b6100db610484565b6100fd61048a565b610180600480360360a081101561016157600080fd5b5080359060208101359060408101359060608101359060800135610499565b6040805192835260208301919091528051918290030190f35b6100db61081a565b6100db610820565b6100db610877565b60045481565b60006007544210156101cb5750600061031b565b600554421061025757600354600054604080516370a0823160e01b81526001600160a01b039283166004820152905191909216916370a08231916024808301926020929190829003018186803b15801561022457600080fd5b505afa158015610238573d6000803e3d6000fd5b505050506040513d602081101561024e57600080fd5b5051905061031b565b6103186102716006546005546108e090919063ffffffff16565b61030c6102fd6000809054906101000a90046001600160a01b03166001600160a01b031663c04637116040518163ffffffff1660e01b815260040160206040518083038186803b1580156102c457600080fd5b505afa1580156102d8573d6000803e3d6000fd5b505050506040513d60208110156102ee57600080fd5b5051429063ffffffff6108e016565b6004549063ffffffff61092216565b9063ffffffff61097b16565b90505b90565b6003546001600160a01b031681565b600354604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561037857600080fd5b505afa15801561038c573d6000803e3d6000fd5b505050506040513d60208110156103a257600080fd5b5051905090565b6002546001600160a01b031633146103fe576040805162461bcd60e51b815260206004820152601360248201527226bab9ba1031329031b7b6b83a3937b63632b960691b604482015290519081900360640190fd5b60008054600154604080516301ddf6a560e51b81526001600160a01b03928316600482015290519190921692633bbed4a0926024808201939182900301818387803b15801561044c57600080fd5b505af1158015610460573d6000803e3d6000fd5b50505050565b6000546001600160a01b031681565b6002546001600160a01b031681565b60055481565b6001546001600160a01b031681565b6000806104a4610ca2565b604080516101008101825260e08101888152815281516020818101845288825280830191909152825190810183528681529181019190915260055460608201906104f4904263ffffffff6108e016565b81526020016105016101b7565b815260200161050e610820565b815260200161051b61032d565b90529050610527610cf1565b6040518060a0016040528061054d8460c00151856080015161087d90919063ffffffff16565b815260200161056984606001518c6109bd90919063ffffffff16565b815260200161059584606001516105898d8d6108e090919063ffffffff16565b9063ffffffff6109bd16565b815260608401516020909101906105b690610589818e63ffffffff6108e016565b815260608401516020909101906105d790610589818d63ffffffff6108e016565b815250905060006007544210156105fa5760005b94506000935061081092505050565b600554421061068f576000600354600054604080516370a0823160e01b81526001600160a01b039283166004820152905191909216916370a08231916024808301926020929190829003018186803b15801561065557600080fd5b505afa158015610669573d6000803e3d6000fd5b505050506040513d602081101561067f57600080fd5b5051909550935061081092505050565b898360600151116106d157825160a084015183516106ae9291906109e7565b8352905060008160038111156106c057fe5b146106cc57600b6105eb565b610806565b88836060015111610745578251602083015160a085015161070492916106fd919063ffffffff610a4316565b84516109e7565b83529050600081600381111561071657fe5b1461072257600b6105eb565b6106ae83602001516106fd84606001518660a00151610a4390919063ffffffff16565b8251602083015160a085015161076692916106fd919063ffffffff610a4316565b83529050600081600381111561077857fe5b1461078457600b6105eb565b6107a783602001516106fd84604001518660a00151610a4390919063ffffffff16565b8352905060008160038111156107b957fe5b146107c557600b6105eb565b6107e883604001516106fd84608001518660a00151610a4390919063ffffffff16565b8352905060008160038111156107fa57fe5b1461080657600b6105eb565b5051600093509150505b9550959350505050565b60065481565b6000600754421015610835575060045461031b565b60055442106108465750600061031b565b6103186108606006546005546108e090919063ffffffff16565b60055461030c906102fd904263ffffffff6108e016565b60075481565b6000828201838110156108d7576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b60006108d783836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250610a61565b600082610931575060006108da565b8282028284828161093e57fe5b04146108d75760405162461bcd60e51b8152600401808060200182810382526021815260200180610d346021913960400191505060405180910390fd5b60006108d783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610af8565b60006108d7826109db85670de0b6b3a764000063ffffffff61092216565b9063ffffffff610b5d16565b60008060006109f4610d20565b6109fe8787610bc4565b90925090506000826003811115610a1157fe5b14610a225750915060009050610a3b565b610a34610a2e82610c2e565b86610c3d565b9350935050505b935093915050565b60006108d7670de0b6b3a76400006109db858563ffffffff61092216565b60008184841115610af05760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ab5578181015183820152602001610a9d565b50505050905090810190601f168015610ae25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183610b475760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610ab5578181015183820152602001610a9d565b506000838581610b5357fe5b0495945050505050565b6000808211610bb3576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610bbc57fe5b049392505050565b6000610bce610d20565b600080610bdf866000015186610c63565b90925090506000826003811115610bf257fe5b14610c1157506040805160208101909152600081529092509050610c27565b6040805160208101909152908152600093509150505b9250929050565b51670de0b6b3a7640000900490565b600080838301848110610c5557600092509050610c27565b506002915060009050610c27565b60008083610c7657506000905080610c27565b83830283858281610c8357fe5b0414610c9757506002915060009050610c27565b600092509050610c27565b6040518060e00160405280610cb5610d20565b8152602001610cc2610d20565b8152602001610ccf610d20565b8152602001600081526020016000815260200160008152602001600081525090565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604051806020016040528060008152509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220c699338b316535bbd7cd3c6cf9569724bb279db141161dcedec612dc80a1d4dd64736f6c634300060a0033536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77506c656173652073657420726563697069656e7420746f207661756c7420636f6e747261637470686173654f6e654375746f6666206d757374206265206c657373207468616e20706861736554776f436f6c6c61746572616c20666163746f72206d757374206265206c657373207468616e204d6178657869744d61726b65743a206765744163636f756e74536e617073686f74206661696c6564436f6c6c61746572616c20666163746f72206d7573742062652067726561746572207468616e206d696e416d6f756e74206f77656420746f2070726576696f7573206c697175696461746f724f726967696e616c20726563697069656e74206d7573742062652063616c6c6572a264697066735822122079abbc315993a807fecc99c727b5242a60d884b94d721d9e27f22ae8b922ee6864736f6c634300060a0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200028b5760003560e01c80638e8f294b1162000165578063d02f735111620000d5578063dcfbc0c71162000093578063dcfbc0c71462000a08578063e4028eee1462000a12578063e87554461462000a41578063eabe7d911462000a4b578063ede4edd01462000a84578063f851a4401462000aad576200028b565b8063d02f7351146200090e578063d664848e1462000957578063d9226ced1462000980578063da3d454c14620009a0578063dce1544914620009d9576200028b565b8063bb82aa5e1162000123578063bb82aa5e14620007ca578063bdcdc25814620007d4578063c211afa91462000813578063c2998238146200083c578063c8bd45af14620008e5576200028b565b80638e8f294b14620006a7578063929fe9a114620006eb57806394b2294b146200071c578063a76b3fda1462000726578063abfceffc146200074f576200028b565b80634ef4c3e111620002015780635ec88c7911620001bf5780635ec88c7914620005745780635fc7e71e14620005bb5780636a61276714620006045780637625456f14620006515780637dc0d1d0146200069d576200028b565b80634ef4c3e114620004535780634fd42e17146200048c57806351dff98914620004ac57806355ee1fe114620004eb5780635d56b9511462000514576200028b565b8063317b0b77116200024f578063317b0b77146200037957806341e3400614620003995780634458305514620003e15780634ada90af14620004205780634b6d8087146200042a576200028b565b80627e3dd214620002905780631e846c1814620002ae5780631f42141514620002d957806324008a621462000314578063267822471462000353575b600080fd5b6200029a62000ab7565b604080519115158252519081900360200190f35b620002d760048036036020811015620002c657600080fd5b50356001600160a01b031662000abc565b005b6200030260048036036020811015620002f157600080fd5b50356001600160a01b031662000f53565b60408051918252519081900360200190f35b62000302600480360360808110156200032c57600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013562001167565b6200035d6200119f565b604080516001600160a01b039092168252519081900360200190f35b62000302600480360360208110156200039157600080fd5b5035620011ae565b620003c860048036036040811015620003b157600080fd5b506001600160a01b0381351690602001356200128b565b6040805192835260208301919091528051918290030190f35b6200030260048036036080811015620003f957600080fd5b506001600160a01b038135811691602081013582169160408201359160600135166200148b565b62000302620019fd565b620002d7600480360360208110156200044257600080fd5b50356001600160a01b031662001a03565b62000302600480360360608110156200046b57600080fd5b506001600160a01b0381358116916020810135909116906040013562001fb2565b6200030260048036036020811015620004a457600080fd5b503562001feb565b620002d760048036036080811015620004c457600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135620020b2565b62000302600480360360208110156200050357600080fd5b50356001600160a01b03166200210e565b6200053d600480360360208110156200052c57600080fd5b50356001600160a01b031662002151565b60408051951515865293151560208601526001600160a01b0392831685850152911660608401526080830152519081900360a00190f35b6200059d600480360360208110156200058c57600080fd5b50356001600160a01b031662002193565b60408051938452602084019290925282820152519081900360600190f35b62000302600480360360a0811015620005d357600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060800135620021cb565b62000302600480360360e08110156200061c57600080fd5b506001600160a01b038135169060208101359060408101359060608101359060808101359060a08101359060c0013562002365565b6200065b620024aa565b604080516001600160a01b0390981688526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b6200035d620024ce565b620006d060048036036020811015620006bf57600080fd5b50356001600160a01b0316620024dd565b60408051921515835260208301919091528051918290030190f35b6200029a600480360360408110156200070357600080fd5b506001600160a01b0381358116916020013516620024fc565b620003026200252f565b62000302600480360360208110156200073e57600080fd5b50356001600160a01b031662002535565b62000778600480360360208110156200076757600080fd5b50356001600160a01b031662002634565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015620007b65781810151838201526020016200079c565b505050509050019250505060405180910390f35b6200035d620026bf565b6200030260048036036080811015620007ec57600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135620026ce565b620002d7600480360360208110156200082b57600080fd5b50356001600160a01b0316620026dd565b62000778600480360360208110156200085457600080fd5b8101906020810181356401000000008111156200087057600080fd5b8201836020820111156200088357600080fd5b80359060200191846020830284011164010000000083111715620008a657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550620029f1945050505050565b6200035d60048036036020811015620008fd57600080fd5b50356001600160a01b031662002b75565b62000302600480360360a08110156200092657600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135909116906080013562002b90565b620003c8600480360360208110156200096f57600080fd5b50356001600160a01b031662002cef565b62000302600480360360208110156200099857600080fd5b503562002df3565b6200030260048036036060811015620009b857600080fd5b506001600160a01b0381358116916020810135909116906040013562002e1f565b6200035d60048036036040811015620009f157600080fd5b506001600160a01b03813516906020013562002fe6565b6200035d6200301c565b620003026004803603604081101562000a2a57600080fd5b506001600160a01b0381351690602001356200302b565b62000302620031a5565b620003026004803603606081101562000a6357600080fd5b506001600160a01b03813581169160208101359091169060400135620031ab565b620003026004803603602081101562000a9c57600080fd5b50356001600160a01b0316620031ba565b6200035d620034c7565b600181565b6002600954141562000b15576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026009556001600160a01b0381811660009081526012602052604090206001015416331462000b4457600080fd5b806001600160a01b0316634e71d92d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000b8057600080fd5b505af115801562000b95573d6000803e3d6000fd5b505050506000816001600160a01b03166319d152fa6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000bd557600080fd5b505afa15801562000bea573d6000803e3d6000fd5b505050506040513d602081101562000c0157600080fd5b50516001600160a01b038381166000908152601260209081526040918290205482516370a0823160e01b81526201000090910484166004820152915192909316926370a0823192602480840193829003018186803b15801562000c6357600080fd5b505afa15801562000c78573d6000803e3d6000fd5b505050506040513d602081101562000c8f57600080fd5b50516001600160a01b038316600090815260126020526040902060020154909150811062000df957816001600160a01b03166319d152fa6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000cf157600080fd5b505afa15801562000d06573d6000803e3d6000fd5b505050506040513d602081101562000d1d57600080fd5b50516001600160a01b038381166000908152601260209081526040808320805460029091015482516323b872dd60e01b815262010000909204861660048301523360248301526044820152905193909416936323b872dd9360648083019491928390030190829087803b15801562000d9457600080fd5b505af115801562000da9573d6000803e3d6000fd5b505050506040513d602081101562000dc057600080fd5b50506001600160a01b0382166000908152601260205260408120600281019190915560010180546001600160a01b031916905562000f4a565b816001600160a01b03166319d152fa6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000e3357600080fd5b505afa15801562000e48573d6000803e3d6000fd5b505050506040513d602081101562000e5f57600080fd5b50516001600160a01b0383811660009081526012602090815260408083205481516323b872dd60e01b8152620100009091048516600482015233602482015260448101879052905193909416936323b872dd9360648083019491928390030190829087803b15801562000ed157600080fd5b505af115801562000ee6573d6000803e3d6000fd5b505050506040513d602081101562000efd57600080fd5b50506001600160a01b03821660009081526012602052604090206002015462000f2d908263ffffffff620034d616565b6001600160a01b0383166000908152601260205260409020600201555b50506001600955565b600080546001600160a01b0316331462000f7d5762000f75600160126200351a565b905062001162565b6001600160a01b038216600090815260126020526040902054829060ff161562000fdd576040805162461bcd60e51b815260206004820152600c60248201526b15985d5b1d081b1a5cdd195960a21b604482015290519081900360640190fd5b806001600160a01b031663e29bc68b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200101757600080fd5b505afa1580156200102c573d6000803e3d6000fd5b505050506040513d60208110156200104357600080fd5b50506001600160a01b0381811660009081526012602052604081205490916201000090910416620010b65781306040516200107e906200420d565b6001600160a01b03928316815291166020820152604080519182900301906000f080158015620010b2573d6000803e3d6000fd5b5090505b6040805160a0810182526001808252600060208084018281526001600160a01b0387811686880190815260608701858152608088018681528b841687526012909552978520965187549351915160ff199094169015151761ff001916610100911515919091021762010000600160b01b0319166201000092821692909202919091178555945192840180546001600160a01b031916939095169290921790935551600290910155925050505b919050565b6001600160a01b03841660009081526011602052604081205460ff16620011915750600962001197565b60005b90505b949350505050565b6001546001600160a01b031681565b6000620011ba62003583565b620011cd5762000f75600160046200351a565b620011d76200421b565b506040805160208101909152828152620011f06200421b565b50604080516020810190915266b1a2bc2ec500008152620012128282620035cf565b156200122f57620012256005806200351a565b9250505062001162565b620012396200421b565b506040805160208101909152670c7d713b49da000081526200125c8184620035d7565b156200127a576200126f6005806200351a565b935050505062001162565b600585905560005b95945050505050565b600480546040805163fc57d4df60e01b81526001600160a01b038681169482019490945290516000938493849391169163fc57d4df91602480820192602092909190829003018186803b158015620012e257600080fd5b505afa158015620012f7573d6000803e3d6000fd5b505050506040513d60208110156200130e57600080fd5b505160048054600a54604080516341976e0960e01b81526001600160a01b0392831694810194909452519394506000939116916341976e09916024808301926020929190829003018186803b1580156200136757600080fd5b505afa1580156200137c573d6000803e3d6000fd5b505050506040513d60208110156200139357600080fd5b50519050811580620013a3575080155b15620013ba57600d93506000925062001484915050565b6000620013c66200421b565b620013d06200421b565b6000620013e060065487620035de565b935090506000816003811115620013f357fe5b146200140f57600b5b9750600096506200148495505050505050565b62001429836040518060200160405280888152506200361d565b9250905060008160038111156200143c57fe5b146200144a57600b620013fc565b62001456828a62003639565b9450905060008160038111156200146957fe5b146200147757600b620013fc565b6000975092955050505050505b9250929050565b600060026009541415620014e6576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026009556001600160a01b0380831660009081526012602052604081205490916200151d91620100009004163388888862002b90565b9050801562001561576040805162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b604482015290519081900360640190fd5b6001600160a01b03831660009081526012602052604090206002015415620015bb5760405162461bcd60e51b815260040180806020018281038252602281526020018062005acd6022913960400191505060405180910390fd5b856001600160a01b0316856001600160a01b0316141562001623576040805162461bcd60e51b815260206004820152601760248201527f426f72726f776572206973205f6c697175696461746f72000000000000000000604482015290519081900360640190fd5b826001600160a01b0316634e71d92d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200165f57600080fd5b505af115801562001674573d6000803e3d6000fd5b505050506000836001600160a01b03166319d152fa6040518163ffffffff1660e01b815260040160206040518083038186803b158015620016b457600080fd5b505afa158015620016c9573d6000803e3d6000fd5b505050506040513d6020811015620016e057600080fd5b50516001600160a01b038581166000908152601260209081526040918290205482516370a0823160e01b81526201000090910484166004820152915192909316926370a0823192602480840193829003018186803b1580156200174257600080fd5b505afa15801562001757573d6000803e3d6000fd5b505050506040513d60208110156200176e57600080fd5b505190508085116200188957836001600160a01b03166319d152fa6040518163ffffffff1660e01b815260040160206040518083038186803b158015620017b457600080fd5b505afa158015620017c9573d6000803e3d6000fd5b505050506040513d6020811015620017e057600080fd5b50516001600160a01b0385811660009081526012602090815260408083205481516323b872dd60e01b815262010000909104851660048201528c85166024820152604481018b9052905193909416936323b872dd9360648083019491928390030190829087803b1580156200185457600080fd5b505af115801562001869573d6000803e3d6000fd5b505050506040513d60208110156200188057600080fd5b50620019eb9050565b836001600160a01b03166319d152fa6040518163ffffffff1660e01b815260040160206040518083038186803b158015620018c357600080fd5b505afa158015620018d8573d6000803e3d6000fd5b505050506040513d6020811015620018ef57600080fd5b50516001600160a01b0385811660009081526012602090815260408083205481516323b872dd60e01b815262010000909104851660048201528c8516602482015260448101879052905193909416936323b872dd9360648083019491928390030190829087803b1580156200196357600080fd5b505af115801562001978573d6000803e3d6000fd5b505050506040513d60208110156200198f57600080fd5b50506001600160a01b03848116600090815260126020526040902060010180546001600160a01b031916918916919091179055620019ce8582620034d6565b6001600160a01b0385166000908152601260205260409020600201555b60006001600955979650505050505050565b60065481565b6001600160a01b038082166000908152601260209081526040808320548151630478051760e51b8152915186956201000090920490911692638f00a2e09260048082019391829003018186803b15801562001a5d57600080fd5b505afa15801562001a72573d6000803e3d6000fd5b505050506040513d602081101562001a8957600080fd5b50516001600160a01b038084166000818152601260209081526040918290205482516319b400eb60e21b815292519596506201000090049093169391926366d003ac92600480840193829003018186803b15801562001ae757600080fd5b505afa15801562001afc573d6000803e3d6000fd5b505050506040513d602081101562001b1357600080fd5b50516001600160a01b03161462001b5c5760405162461bcd60e51b815260040180806020018281038252602681526020018062005a086026913960400191505060405180910390fd5b6001600160a01b038116331462001ba55760405162461bcd60e51b815260040180806020018281038252602181526020018062005aef6021913960400191505060405180910390fd5b3360009081526008602090815260409182902080548351818402810184019094528084526060939283018282801562001c0857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001be9575b50939450600093505050505b815181101562001d1657600082828151811062001c2d57fe5b602002602001015190506000816001600160a01b031663c37f68e2336040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060806040518083038186803b15801562001c9057600080fd5b505afa15801562001ca5573d6000803e3d6000fd5b505050506040513d608081101562001cbc57600080fd5b50604001519050801562001d0b576040805162461bcd60e51b8152602060048201526011602482015270135d5cdd081c185e481bd999881919589d607a1b604482015290519081900360640190fd5b505060010162001c14565b506001600160a01b0383166000908152601260205260409020600201541562001d715760405162461bcd60e51b815260040180806020018281038252602281526020018062005acd6022913960400191505060405180910390fd5b6001600160a01b038084166000818152601260208181526040808420805461ff00191681553385526013835281852080546001600160a01b031916905594845291905291548251634d3fc32d60e01b815292516201000090910490931692634d3fc32d92600480820193929182900301818387803b15801562001df357600080fd5b505af115801562001e08573d6000803e3d6000fd5b505050506000836001600160a01b03166319d152fa6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001e4857600080fd5b505afa15801562001e5d573d6000803e3d6000fd5b505050506040513d602081101562001e7457600080fd5b50516001600160a01b0385811660009081526012602090815260408083205481516370a0823160e01b8152620100009091048516600482015290519495509193928516926370a08231926024808201939291829003018186803b15801562001edb57600080fd5b505afa15801562001ef0573d6000803e3d6000fd5b505050506040513d602081101562001f0757600080fd5b50516001600160a01b0386811660009081526012602090815260408083205481516323b872dd60e01b815262010000909104851660048201528985166024820152604481018690529051949550928616936323b872dd93606480820194918390030190829087803b15801562001f7c57600080fd5b505af115801562001f91573d6000803e3d6000fd5b505050506040513d602081101562001fa857600080fd5b5050505050505050565b6001600160a01b03831660009081526011602052604081205460ff1662001fde5760095b905062001fe4565b60005b90505b9392505050565b600062001ff762003583565b6200200a5762000f756001600b6200351a565b620020146200421b565b5060408051602081019091528281526200202d6200421b565b506040805160208101909152670de0b6b3a76400008152620020508282620035d7565b156200206457620012256007600c6200351a565b6200206e6200421b565b5060408051602081019091526714d1120d7b1600008152620020918184620035d7565b15620020a5576200126f6007600c6200351a565b6006859055600062001282565b80158015620020c15750600082115b1562002108576040805162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b604482015290519081900360640190fd5b50505050565b60006200211a62003583565b6200212d5762000f75600160106200351a565b600480546001600160a01b0319166001600160a01b03841617905560005b92915050565b60126020526000908152604090208054600182015460029092015460ff808316936101008404909116926001600160a01b036201000090910481169291169085565b600080600080600080620021ac87600080600062003695565b925092509250826011811115620021bf57fe5b97919650945092505050565b6001600160a01b03851660009081526011602052604081205460ff1615806200220d57506001600160a01b03851660009081526012602052604090205460ff16155b156200221e5760095b905062001282565b6000806200222c8562003ce5565b919350909150600090508260118111156200224357fe5b1462002260578160118111156200225657fe5b9250505062001282565b806200226e57600362002256565b6000886001600160a01b03166395dd9193876040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015620022c757600080fd5b505afa158015620022dc573d6000803e3d6000fd5b505050506040513d6020811015620022f357600080fd5b505160408051602081019091526005548152909150600090819062002319908462003639565b909250905060008260038111156200232d57fe5b146200234357600b5b9550505050505062001282565b808711156200235457601162002336565b5060009a9950505050505050505050565b600080546001600160a01b031633146200238f5762002387600160126200351a565b90506200249f565b85871115620023d05760405162461bcd60e51b815260040180806020018281038252602981526020018062005a2e6029913960400191505060405180910390fd5b670c7d713b49da0000821115620024195760405162461bcd60e51b815260040180806020018281038252602781526020018062005a576027913960400191505060405180910390fd5b66b1a2bc2ec50000821015620024615760405162461bcd60e51b815260040180806020018281038252602a81526020018062005aa3602a913960400191505060405180910390fd5b600a80546001600160a01b0319166001600160a01b038a16179055600e879055600f869055600b859055600c849055600d8390556010829055600090505b979650505050505050565b600a54600b54600c54600d54600e54600f546010546001600160a01b039096169587565b6004546001600160a01b031681565b6011602052600090815260409020805460019091015460ff9091169082565b6001600160a01b038082166000908152601160209081526040808320938616835260029093019052205460ff1692915050565b60075481565b600080546001600160a01b03163314620025575762000f75600160126200351a565b6001600160a01b03821660009081526011602052604090205460ff1615620025875762000f75600a60116200351a565b816001600160a01b031663fe9c44ae6040518163ffffffff1660e01b815260040160206040518083038186803b158015620025c157600080fd5b505afa158015620025d6573d6000803e3d6000fd5b505050506040513d6020811015620025ed57600080fd5b50506040805180820182526001808252600060208084018281526001600160a01b038816835260119091529381209251835460ff191690151517835592519101556200214b565b60608060086000846001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015620026b257602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162002693575b5093979650505050505050565b6002546001600160a01b031681565b60006200119485858462003d07565b6001600160a01b038116600090815260126020526040902054819060ff166200273e576040805162461bcd60e51b815260206004820152600e60248201526d135d5cdd081899481b1a5cdd195960921b604482015290519081900360640190fd5b6001600160a01b038116600090815260126020526040902054610100900460ff1615620027a8576040805162461bcd60e51b8152602060048201526013602482015272135d5cdd081b9bdd08189948195b98589b1959606a1b604482015290519081900360640190fd5b306001600160a01b0316816001600160a01b03166366d003ac6040518163ffffffff1660e01b815260040160206040518083038186803b158015620027ec57600080fd5b505afa15801562002801573d6000803e3d6000fd5b505050506040513d60208110156200281857600080fd5b50516001600160a01b03161462002876576040805162461bcd60e51b815260206004820152601d60248201527f526563697069656e74206d75737420626520436f6d7074726f6c6c6572000000604482015290519081900360640190fd5b6001600160a01b03818116600090815260126020908152604091829020548251630478051760e51b8152925133946201000090920490911692638f00a2e0926004808301939192829003018186803b158015620028d257600080fd5b505afa158015620028e7573d6000803e3d6000fd5b505050506040513d6020811015620028fe57600080fd5b50516001600160a01b031614620029475760405162461bcd60e51b815260040180806020018281038252602181526020018062005aef6021913960400191505060405180910390fd5b6001600160a01b038082166000818152601260208181526040808420805461ff0019166101001781553385526013835281852080546001600160a01b0319168717905585855292909152905481516301ddf6a560e51b8152620100009091049094166004850152519192633bbed4a0926024808301939282900301818387803b158015620029d457600080fd5b505af1158015620029e9573d6000803e3d6000fd5b505050505050565b8051606090818167ffffffffffffffff8111801562002a0f57600080fd5b5060405190808252806020026020018201604052801562002a3a578160200160208202803683370190505b50905060005b8281101562002b6d57600085828151811062002a5857fe5b6020908102919091018101516001600160a01b03811660009081526011909252604090912080549192509060ff1662002aaf5760095b84848151811062002a9b57fe5b602002602001018181525050505062002b64565b33600090815260028201602052604090205460ff1615156001141562002ad757600062002a8e565b600754336000908152600860205260409020541062002af857601062002a8e565b33600090815260028201602090815260408083208054600160ff199091168117909155600883529083208054918201815583529082200180546001600160a01b0319166001600160a01b03851617905584848151811062002b5557fe5b60200260200101818152505050505b60010162002a40565b509392505050565b6013602052600090815260409020546001600160a01b031681565b6001600160a01b038083166000908152601360209081526040808320549093168252601290529081205460ff16158062002be357506001600160a01b03851660009081526011602052604090205460ff16155b1562002bf157600962002216565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b15801562002c2b57600080fd5b505afa15801562002c40573d6000803e3d6000fd5b505050506040513d602081101562002c5757600080fd5b505160408051635fe3b56760e01b815290516001600160a01b0392831692891691635fe3b567916004808301926020929190829003018186803b15801562002c9e57600080fd5b505afa15801562002cb3573d6000803e3d6000fd5b505050506040513d602081101562002cca57600080fd5b50516001600160a01b03161462002ce357600262002216565b60009695505050505050565b6001600160a01b0380821660009081526013602090815260408083205484168352601290915280822054600e54600f54600b54600c54600d54865163687e851d60e11b81526004810195909552602485019390935260448401919091526064830152608482015282519394859462010000909304169284928392859263d0fd0a3a9260a480840193829003018186803b15801562002d8c57600080fd5b505afa15801562002da1573d6000803e3d6000fd5b505050506040513d604081101562002db857600080fd5b5080516020909101519092509050811562002ddf57600b94506000935062002dee92505050565b60009450925062002dee915050565b915091565b600062002dff62003583565b62002e125762000f756001600d6200351a565b600782905560006200214b565b6001600160a01b03831660009081526011602052604081205460ff1662002e4857600962001fd6565b6001600160a01b038085166000908152601160209081526040808320938716835260029093019052205460ff1662002e8257600862001fd6565b6001600160a01b038381166000908152601360209081526040808320549093168252601290522054610100900460ff1662002f04576040805162461bcd60e51b815260206004820152601960248201527f4e6f7420656e61626c656420617320636f6c6c61746572616c00000000000000604482015290519081900360640190fd5b600480546040805163fc57d4df60e01b81526001600160a01b03888116948201949094529051929091169163fc57d4df91602480820192602092909190829003018186803b15801562002f5657600080fd5b505afa15801562002f6b573d6000803e3d6000fd5b505050506040513d602081101562002f8257600080fd5b505162002f9157600d62001fd6565b60008062002fa3858760008762003695565b9193509091506000905082601181111562002fba57fe5b1462002fd75781601181111562002fcd57fe5b9250505062001fe4565b801562002ce357600462002fcd565b600860205281600052604060002081815481106200300057fe5b6000918252602090912001546001600160a01b03169150829050565b6003546001600160a01b031681565b600080546001600160a01b0316331462003055576200304d600160066200351a565b90506200214b565b6001600160a01b0383166000908152601160205260409020805460ff166200308e5762003085600960076200351a565b9150506200214b565b620030986200421b565b506040805160208101909152838152620030b16200421b565b506040805160208101909152670c7d713b49da00008152620030d48183620035d7565b15620030f357620030e8600660086200351a565b93505050506200214b565b8415801590620031805750600480546040805163fc57d4df60e01b81526001600160a01b038a8116948201949094529051929091169163fc57d4df91602480820192602092909190829003018186803b1580156200315057600080fd5b505afa15801562003165573d6000803e3d6000fd5b505050506040513d60208110156200317c57600080fd5b5051155b156200319457620030e8600d60096200351a565b505060010191909155506000919050565b60055481565b600062001fe184848462003d07565b6000808290506000806000836001600160a01b031663c37f68e2336040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060806040518083038186803b1580156200321c57600080fd5b505afa15801562003231573d6000803e3d6000fd5b505050506040513d60808110156200324857600080fd5b5080516020820151604090920151909450909250905082156200329d5760405162461bcd60e51b815260040180806020018281038252602581526020018062005a7e6025913960400191505060405180910390fd5b8015620032be57620032b2600c60026200351a565b94505050505062001162565b6000620032cd87338562003d07565b90508015620032f257620032e5600e60038362003d7c565b9550505050505062001162565b6001600160a01b0385166000908152601160209081526040808320338452600281019092529091205460ff1662003333576000965050505050505062001162565b3360009081526002820160209081526040808320805460ff191690556008825291829020805483518184028101840190945280845260609392830182828015620033a757602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162003388575b5050835193945083925060009150505b828110156200340157896001600160a01b0316848281518110620033d757fe5b60200260200101516001600160a01b03161415620033f85780915062003401565b600101620033b7565b508181106200340c57fe5b3360009081526008602052604090208054819060001981019081106200342e57fe5b9060005260206000200160009054906101000a90046001600160a01b03168183815481106200345957fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550808054806200349257fe5b600082815260208120820160001990810180546001600160a01b03191690559091019091559c9b505050505050505050505050565b6000546001600160a01b031681565b600062001fe483836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f770081525062003de5565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa08360118111156200354a57fe5b8360138111156200355757fe5b604080519283526020830191909152600082820152519081900360600190a182601181111562001fe457fe5b60025460009081906001600160a01b031633148015620035ad57506000546001600160a01b031632145b6000549091506001600160a01b031633148080620035c85750815b9250505090565b519051111590565b5190511090565b6000620035ea6200421b565b6200361260405180602001604052808681525060405180602001604052808681525062003e80565b915091509250929050565b6000620036296200421b565b8351835162003612919062003f7a565b6000806000620036486200421b565b62003654868662004037565b909250905060008260038111156200366857fe5b146200367b575091506000905062001484565b60006200368882620040a6565b9350935050509250929050565b6000806000620036a46200422e565b600080620036b28a62002cef565b60c085015291508115620036d55750600b94506000935083925062003cdb915050565b6001600160a01b03808b166000908152601360209081526040808320549093168252601290522060020154156200374d576001600160a01b03808b16600090815260136020908152604080832054909316825260129052206002015460c0840151620037479163ffffffff620034d616565b60c08401525b60048054600a54604080516341976e0960e01b81526001600160a01b0392831694810194909452519116916341976e09916024808301926020929190829003018186803b1580156200379e57600080fd5b505afa158015620037b3573d6000803e3d6000fd5b505050506040513d6020811015620037ca57600080fd5b505160a08401819052620037ed5750600d94506000935083925062003cdb915050565b604080516020808201835260a0860151825261012086019182528251908101909252601054825260e085018290525162003828919062003e80565b610140850152905060008160038111156200383f57fe5b146200385a5750600b94506000935083925062003cdb915050565b620038748361014001518460c001518560000151620040b5565b8452905060008160038111156200388757fe5b14620038a25750600b94506000935083925062003cdb915050565b6001600160a01b038a166000908152600860209081526040918290208054835181840281018401909452808452606093928301828280156200390e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620038ef575b50939450600093505050505b815181101562003c935760008282815181106200393357fe5b60200260200101519050806001600160a01b031663c37f68e28e6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060806040518083038186803b1580156200399457600080fd5b505afa158015620039a9573d6000803e3d6000fd5b505050506040513d6080811015620039c057600080fd5b508051602082015160408084015160609485015160808c0152938a0193909352918801919091529450841562003a085750600f97506000965086955062003cdb945050505050565b60408051602080820183526001600160a01b0380851660008181526011845285902060010154845260e08b01939093528351808301855260808b015181526101008b015260048054855163fc57d4df60e01b815291820194909452935192169263fc57d4df9260248083019392829003018186803b15801562003a8a57600080fd5b505afa15801562003a9f573d6000803e3d6000fd5b505050506040513d602081101562003ab657600080fd5b505160a0870181905262003adc5750600d97506000965086955062003cdb945050505050565b604080516020810190915260a08701518152610120870181905260e087015161010088015162003b0c926200411c565b6101408801529350600084600381111562003b2357fe5b1462003b415750600b97506000965086955062003cdb945050505050565b62003b5b86610140015187604001518860000151620040b5565b87529350600084600381111562003b6e57fe5b1462003b8c5750600b97506000965086955062003cdb945050505050565b62003ba686610120015187606001518860200151620040b5565b60208801529350600084600381111562003bbc57fe5b1462003bda5750600b97506000965086955062003cdb945050505050565b8b6001600160a01b0316816001600160a01b0316141562003c895762003c0b8661014001518c8860200151620040b5565b60208801529350600084600381111562003c2157fe5b1462003c3f5750600b97506000965086955062003cdb945050505050565b62003c558661012001518b8860200151620040b5565b60208801529350600084600381111562003c6b57fe5b1462003c895750600b97506000965086955062003cdb945050505050565b506001016200391a565b5060208401518451111562003cbc57505050602081015190516000945003915082905062003cdb565b505081516020909201516000955085945091909103915062003cdb9050565b9450945094915050565b600080600062003cfa84600080600062003695565b9250925092509193909250565b6001600160a01b03831660009081526011602052604081205460ff1662003d3057600962001fd6565b6001600160a01b038085166000908152601160209081526040808320938716835260029093019052205460ff1662003d6a57600062001fd6565b60008062002fa3858786600062003695565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa084601181111562003dac57fe5b84601381111562003db957fe5b604080519283526020830191909152818101859052519081900360600190a183601181111562001fe157fe5b6000818484111562003e785760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101562003e3c57818101518382015260200162003e22565b50505050905090810190601f16801562003e6a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600062003e8c6200421b565b60008062003ea38660000151866000015162004171565b9092509050600082600381111562003eb757fe5b1462003ed85750604080516020810190915260008152909250905062001484565b60008062003eef6706f05b59d3b2000084620041b6565b9092509050600082600381111562003f0357fe5b1462003f28578160405180602001604052806000815250955095505050505062001484565b60008062003f3f83670de0b6b3a7640000620041df565b9092509050600082600381111562003f5357fe5b1462003f5b57fe5b604080516020810190915290815260009a909950975050505050505050565b600062003f866200421b565b60008062003f9d86670de0b6b3a764000062004171565b9092509050600082600381111562003fb157fe5b1462003fd25750604080516020810190915260008152909250905062001484565b60008062003fe18388620041df565b9092509050600082600381111562003ff557fe5b146200401a578160405180602001604052806000815250955095505050505062001484565b604080516020810190915290815260009890975095505050505050565b6000620040436200421b565b6000806200405686600001518662004171565b909250905060008260038111156200406a57fe5b146200408b5750604080516020810190915260008152909250905062001484565b60408051602081019091529081526000969095509350505050565b51670de0b6b3a7640000900490565b6000806000620040c46200421b565b620040d0878762004037565b90925090506000826003811115620040e457fe5b14620040f7575091506000905062004114565b6200410d6200410682620040a6565b86620041b6565b9350935050505b935093915050565b6000620041286200421b565b6000620041346200421b565b62004140878762003e80565b909250905060008260038111156200415457fe5b146200416557909250905062004114565b6200410d818662003e80565b60008083620041865750600090508062001484565b838302838582816200419457fe5b0414620041aa5750600291506000905062001484565b60009250905062001484565b600080838301848110620041d05760009250905062001484565b50600291506000905062001484565b60008082620041f5575060019050600062001484565b60008385816200420157fe5b04915091509250929050565b61176080620042a883390190565b6040518060200160405280600081525090565b60405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001620042756200421b565b8152602001620042846200421b565b8152602001620042936200421b565b8152602001620042a26200421b565b90529056fe60806040523480156200001157600080fd5b506040516200176038038062001760833981810160405260408110156200003757600080fd5b508051602091820151600080546001600160a01b038085166001600160a01b03199283168117909355600280549185169190921617905560408051623947bb60e11b8152905193949293919262728f7692600480840193829003018186803b158015620000a357600080fd5b505afa158015620000b8573d6000803e3d6000fd5b505050506040513d6020811015620000cf57600080fd5b5051600490815560408051630ce8a97d60e11b815290516001600160a01b038516926319d152fa92808201926020929091829003018186803b1580156200011557600080fd5b505afa1580156200012a573d6000803e3d6000fd5b505050506040513d60208110156200014157600080fd5b5051600380546001600160a01b0319166001600160a01b03928316179055604080516384a1931f60e01b81529051918416916384a1931f91600480820192602092909190829003018186803b1580156200019a57600080fd5b505afa158015620001af573d6000803e3d6000fd5b505050506040513d6020811015620001c657600080fd5b50516005556040805163e29bc68b60e01b815290516001600160a01b0384169163e29bc68b916004808301926020929190829003018186803b1580156200020c57600080fd5b505afa15801562000221573d6000803e3d6000fd5b505050506040513d60208110156200023857600080fd5b505160065560408051633cd9039d60e21b815290516001600160a01b0384169163f3640e74916004808301926020929190829003018186803b1580156200027e57600080fd5b505afa15801562000293573d6000803e3d6000fd5b505050506040513d6020811015620002aa57600080fd5b5051600755604080516319b400eb60e21b815290516001600160a01b038416916366d003ac916004808301926020929190829003018186803b158015620002f057600080fd5b505afa15801562000305573d6000803e3d6000fd5b505050506040513d60208110156200031c57600080fd5b5051600180546001600160a01b0319166001600160a01b03928316179055600354604080516370a0823160e01b81528584166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b1580156200038457600080fd5b505afa15801562000399573d6000803e3d6000fd5b505050506040513d6020811015620003b057600080fd5b505190506000620003c96001600160e01b03620004ce16565b90506000620003e06001600160e01b036200066016565b90506000620003f76001600160e01b03620006df16565b9050836200042d826200041986866200074b60201b6200087d1790919060201c565b6200074b60201b6200087d1790919060201c565b106200043857600080fd5b6003546002546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b1580156200049357600080fd5b505af1158015620004a8573d6000803e3d6000fd5b505050506040513d6020811015620004bf57600080fd5b50620009a59650505050505050565b6000600754421015620004e4575060006200065d565b60055442106200057557600354600054604080516370a0823160e01b81526001600160a01b039283166004820152905191909216916370a08231916024808301926020929190829003018186803b1580156200053f57600080fd5b505afa15801562000554573d6000803e3d6000fd5b505050506040513d60208110156200056b57600080fd5b505190506200065d565b6200065a62000597600654600554620007af60201b620008e01790919060201c565b620006466200062f6000809054906101000a90046001600160a01b03166001600160a01b031663c04637116040518163ffffffff1660e01b815260040160206040518083038186803b158015620005ed57600080fd5b505afa15801562000602573d6000803e3d6000fd5b505050506040513d60208110156200061957600080fd5b50514290620007af602090811b620008e017901c565b600454620007f960201b620009221790919060201c565b6200085760201b6200097b1790919060201c565b90505b90565b600354604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015620006ac57600080fd5b505afa158015620006c1573d6000803e3d6000fd5b505050506040513d6020811015620006d857600080fd5b5051905090565b6000600754421015620006f657506004546200065d565b600554421062000709575060006200065d565b6200065a6200072b600654600554620007af60201b620008e01790919060201c565b620006466200062f42600554620007af60201b620008e01790919060201c565b600082820183811015620007a6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000620007a683836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250620008a160201b60201c565b6000826200080a57506000620007a9565b828202828482816200081857fe5b0414620007a65760405162461bcd60e51b81526004018080602001828103825260218152602001806200173f6021913960400191505060405180910390fd5b6000620007a683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506200093c60201b60201c565b60008184841115620009345760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620008f8578181015183820152602001620008de565b50505050905090810190601f168015620009265780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836200098e5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315620008f8578181015183820152602001620008de565b5060008385816200099b57fe5b0495945050505050565b610d8a80620009b56000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80635fe3b5671161008c578063d0fd0a3a11610066578063d0fd0a3a1461014b578063e29bc68b14610199578063e7c2a608146101a1578063f3640e74146101a9576100ce565b80635fe3b5671461013357806384a1931f1461013b5780638f00a2e014610143576100ce565b8062728f76146100d35780631845dc3a146100ed57806319d152fa146100f557806328fc08f3146101195780634d3fc32d146101215780635e6f60451461012b575b600080fd5b6100db6101b1565b60408051918252519081900360200190f35b6100db6101b7565b6100fd61031e565b604080516001600160a01b039092168252519081900360200190f35b6100db61032d565b6101296103a9565b005b6100fd610466565b6100fd610475565b6100db610484565b6100fd61048a565b610180600480360360a081101561016157600080fd5b5080359060208101359060408101359060608101359060800135610499565b6040805192835260208301919091528051918290030190f35b6100db61081a565b6100db610820565b6100db610877565b60045481565b60006007544210156101cb5750600061031b565b600554421061025757600354600054604080516370a0823160e01b81526001600160a01b039283166004820152905191909216916370a08231916024808301926020929190829003018186803b15801561022457600080fd5b505afa158015610238573d6000803e3d6000fd5b505050506040513d602081101561024e57600080fd5b5051905061031b565b6103186102716006546005546108e090919063ffffffff16565b61030c6102fd6000809054906101000a90046001600160a01b03166001600160a01b031663c04637116040518163ffffffff1660e01b815260040160206040518083038186803b1580156102c457600080fd5b505afa1580156102d8573d6000803e3d6000fd5b505050506040513d60208110156102ee57600080fd5b5051429063ffffffff6108e016565b6004549063ffffffff61092216565b9063ffffffff61097b16565b90505b90565b6003546001600160a01b031681565b600354604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561037857600080fd5b505afa15801561038c573d6000803e3d6000fd5b505050506040513d60208110156103a257600080fd5b5051905090565b6002546001600160a01b031633146103fe576040805162461bcd60e51b815260206004820152601360248201527226bab9ba1031329031b7b6b83a3937b63632b960691b604482015290519081900360640190fd5b60008054600154604080516301ddf6a560e51b81526001600160a01b03928316600482015290519190921692633bbed4a0926024808201939182900301818387803b15801561044c57600080fd5b505af1158015610460573d6000803e3d6000fd5b50505050565b6000546001600160a01b031681565b6002546001600160a01b031681565b60055481565b6001546001600160a01b031681565b6000806104a4610ca2565b604080516101008101825260e08101888152815281516020818101845288825280830191909152825190810183528681529181019190915260055460608201906104f4904263ffffffff6108e016565b81526020016105016101b7565b815260200161050e610820565b815260200161051b61032d565b90529050610527610cf1565b6040518060a0016040528061054d8460c00151856080015161087d90919063ffffffff16565b815260200161056984606001518c6109bd90919063ffffffff16565b815260200161059584606001516105898d8d6108e090919063ffffffff16565b9063ffffffff6109bd16565b815260608401516020909101906105b690610589818e63ffffffff6108e016565b815260608401516020909101906105d790610589818d63ffffffff6108e016565b815250905060006007544210156105fa5760005b94506000935061081092505050565b600554421061068f576000600354600054604080516370a0823160e01b81526001600160a01b039283166004820152905191909216916370a08231916024808301926020929190829003018186803b15801561065557600080fd5b505afa158015610669573d6000803e3d6000fd5b505050506040513d602081101561067f57600080fd5b5051909550935061081092505050565b898360600151116106d157825160a084015183516106ae9291906109e7565b8352905060008160038111156106c057fe5b146106cc57600b6105eb565b610806565b88836060015111610745578251602083015160a085015161070492916106fd919063ffffffff610a4316565b84516109e7565b83529050600081600381111561071657fe5b1461072257600b6105eb565b6106ae83602001516106fd84606001518660a00151610a4390919063ffffffff16565b8251602083015160a085015161076692916106fd919063ffffffff610a4316565b83529050600081600381111561077857fe5b1461078457600b6105eb565b6107a783602001516106fd84604001518660a00151610a4390919063ffffffff16565b8352905060008160038111156107b957fe5b146107c557600b6105eb565b6107e883604001516106fd84608001518660a00151610a4390919063ffffffff16565b8352905060008160038111156107fa57fe5b1461080657600b6105eb565b5051600093509150505b9550959350505050565b60065481565b6000600754421015610835575060045461031b565b60055442106108465750600061031b565b6103186108606006546005546108e090919063ffffffff16565b60055461030c906102fd904263ffffffff6108e016565b60075481565b6000828201838110156108d7576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b60006108d783836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250610a61565b600082610931575060006108da565b8282028284828161093e57fe5b04146108d75760405162461bcd60e51b8152600401808060200182810382526021815260200180610d346021913960400191505060405180910390fd5b60006108d783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610af8565b60006108d7826109db85670de0b6b3a764000063ffffffff61092216565b9063ffffffff610b5d16565b60008060006109f4610d20565b6109fe8787610bc4565b90925090506000826003811115610a1157fe5b14610a225750915060009050610a3b565b610a34610a2e82610c2e565b86610c3d565b9350935050505b935093915050565b60006108d7670de0b6b3a76400006109db858563ffffffff61092216565b60008184841115610af05760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ab5578181015183820152602001610a9d565b50505050905090810190601f168015610ae25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183610b475760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610ab5578181015183820152602001610a9d565b506000838581610b5357fe5b0495945050505050565b6000808211610bb3576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610bbc57fe5b049392505050565b6000610bce610d20565b600080610bdf866000015186610c63565b90925090506000826003811115610bf257fe5b14610c1157506040805160208101909152600081529092509050610c27565b6040805160208101909152908152600093509150505b9250929050565b51670de0b6b3a7640000900490565b600080838301848110610c5557600092509050610c27565b506002915060009050610c27565b60008083610c7657506000905080610c27565b83830283858281610c8357fe5b0414610c9757506002915060009050610c27565b600092509050610c27565b6040518060e00160405280610cb5610d20565b8152602001610cc2610d20565b8152602001610ccf610d20565b8152602001600081526020016000815260200160008152602001600081525090565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604051806020016040528060008152509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220c699338b316535bbd7cd3c6cf9569724bb279db141161dcedec612dc80a1d4dd64736f6c634300060a0033536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77506c656173652073657420726563697069656e7420746f207661756c7420636f6e747261637470686173654f6e654375746f6666206d757374206265206c657373207468616e20706861736554776f436f6c6c61746572616c20666163746f72206d757374206265206c657373207468616e204d6178657869744d61726b65743a206765744163636f756e74536e617073686f74206661696c6564436f6c6c61746572616c20666163746f72206d7573742062652067726561746572207468616e206d696e416d6f756e74206f77656420746f2070726576696f7573206c697175696461746f724f726967696e616c20726563697069656e74206d7573742062652063616c6c6572a264697066735822122079abbc315993a807fecc99c727b5242a60d884b94d721d9e27f22ae8b922ee6864736f6c634300060a0033",
  "devdoc": {
    "details": "This was the first version of the Comptroller brains.  We keep it so our tests can continue to do the real-life behavior of upgrading from this logic forward.",
    "methods": {
      "_setCloseFactor(uint256)": {
        "details": "Admin function to set closeFactor",
        "params": {
          "newCloseFactorMantissa": "New close factor, scaled by 1e18"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
        }
      },
      "_setCollateralFactor(address,uint256)": {
        "details": "Admin function to set per-market collateralFactor",
        "params": {
          "cToken": "The market to set the factor on",
          "newCollateralFactorMantissa": "The new collateral factor, scaled by 1e18"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
        }
      },
      "_setLiquidationIncentive(uint256)": {
        "details": "Admin function to set liquidationIncentive",
        "params": {
          "newLiquidationIncentiveMantissa": "New liquidationIncentive scaled by 1e18"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
        }
      },
      "_setMaxAssets(uint256)": {
        "details": "Admin function to set maxAssets",
        "params": {
          "newMaxAssets": "New max assets"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
        }
      },
      "_setPriceOracle(address)": {
        "details": "Admin function to set a new price oracle",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setVestingNPVConfig(address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Admin function to set the VestingNPVConfig struct",
        "params": {
          "_phaseOneCutoff": "value in block time for first phase ",
          "_phaseOneDiscountMantissa": "discount factor (e.g. 0.5) per phase in Mantissa"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
        }
      },
      "_supportCollateralVault(address)": {
        "details": "Admin function to set isListed and add support for the market",
        "params": {
          "_vestingContractAddress": "to list as collateral"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
        }
      },
      "_supportMarket(address)": {
        "details": "Admin function to set isListed and add support for the market",
        "params": {
          "cToken": "The address of the market (token) to list"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
        }
      },
      "borrowAllowed(address,address,uint256)": {
        "params": {
          "borrowAmount": "The amount of underlying the account would borrow",
          "borrower": "The account which would borrow the asset",
          "cToken": "The market to verify the borrow against"
        },
        "returns": {
          "_0": "0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "checkMembership(address,address)": {
        "params": {
          "account": "The address of the account to check",
          "cToken": "The cToken to check"
        },
        "returns": {
          "_0": "True if the account is in the asset, otherwise false."
        }
      },
      "exitMarket(address)": {
        "details": "Sender must not have an outstanding borrow balance in the asset,  or be providing neccessary collateral for an outstanding borrow.",
        "params": {
          "cTokenAddress": "The address of the asset to be removed"
        },
        "returns": {
          "_0": "Whether or not the account successfully exited the market"
        }
      },
      "getAccountLiquidity(address)": {
        "returns": {
          "_0": "(possible error code (semi-opaque), account liquidity in excess of collateral requirements,          account shortfall below collateral requirements)"
        }
      },
      "getAssetsIn(address)": {
        "params": {
          "account": "The address of the account to pull assets for"
        },
        "returns": {
          "_0": "A dynamic list with the assets the account has entered"
        }
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "cTokenBorrowed": "Asset which was borrowed by the borrower",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "repayAmount": "The amount of underlying being repaid",
          "vestingContract": "Asset which was used as collateral and will be seized"
        }
      },
      "liquidateCalculateSeizeTokens(address,uint256)": {
        "details": "Used in liquidation (called in cToken.liquidateBorrowFresh)",
        "params": {
          "cTokenBorrowed": "The address of the borrowed cToken",
          "repayAmount": "The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens"
        },
        "returns": {
          "_0": "(errorCode, number of cTokenCollateral tokens to be seized in a liquidation)"
        }
      },
      "mintAllowed(address,address,uint256)": {
        "params": {
          "cToken": "The market to verify the mint against",
          "mintAmount": "The amount of underlying being supplied to the market in exchange for tokens",
          "minter": "The account which would get the minted tokens"
        },
        "returns": {
          "_0": "0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "redeemAllowed(address,address,uint256)": {
        "params": {
          "cToken": "The market to verify the redeem against",
          "redeemTokens": "The number of cTokens to exchange for the underlying asset in the market",
          "redeemer": "The account which would redeem the tokens"
        },
        "returns": {
          "_0": "0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "params": {
          "cToken": "Asset being redeemed",
          "redeemAmount": "The amount of the underlying asset being redeemed",
          "redeemTokens": "The number of tokens being redeemed",
          "redeemer": "The address redeeming the tokens"
        }
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "params": {
          "borrower": "The account which would borrowed the asset",
          "cToken": "The market to verify the repay against",
          "payer": "The account which would repay the asset",
          "repayAmount": "The amount of the underlying asset the account would repay"
        },
        "returns": {
          "_0": "0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "seizeAllowed(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "cTokenBorrowed": "Asset which was borrowed by the borrower",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "seizeTokens": "The number of collateral tokens to seize",
          "vestingContractWrapper": "Asset which was used as collateral and will be seized"
        }
      },
      "transferAllowed(address,address,address,uint256)": {
        "params": {
          "cToken": "The market to verify the transfer against",
          "dst": "The account which receives the tokens",
          "src": "The account which sources the tokens",
          "transferTokens": "The number of cTokens to transfer"
        },
        "returns": {
          "_0": "0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "vestingCalculateNPV(address)": {
        "details": "Note that we calculate the exchangeRateStored for each collateral cToken using stored data,  without calculating accumulated interest.",
        "params": {
          "owner": "The original owner / recipient of the vesting Collateral"
        },
        "returns": {
          "_0": "(possible error code,          accountLiquidity)"
        }
      }
    },
    "stateVariables": {
      "markets": {
        "details": "Used e.g. to determine if a market is supported"
      }
    },
    "title": "Compound's Comptroller Contract"
  },
  "userdoc": {
    "methods": {
      "_setCloseFactor(uint256)": {
        "notice": "Sets the closeFactor used when liquidating borrows"
      },
      "_setCollateralFactor(address,uint256)": {
        "notice": "Sets the collateralFactor for a market"
      },
      "_setLiquidationIncentive(uint256)": {
        "notice": "Sets liquidationIncentive"
      },
      "_setMaxAssets(uint256)": {
        "notice": "Sets maxAssets which controls how many markets can be entered"
      },
      "_setPriceOracle(address)": {
        "notice": "Sets a new price oracle for the comptroller"
      },
      "_setVestingNPVConfig(address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "sets the VestingNPVConfigValues"
      },
      "_supportCollateralVault(address)": {
        "notice": "Add the vesting contract collateral and list as collateral"
      },
      "_supportMarket(address)": {
        "notice": "Add the market to the markets mapping and set it as listed"
      },
      "accountAssets(address,uint256)": {
        "notice": "Per-account mapping of \"assets you are in\", capped by maxAssets"
      },
      "admin()": {
        "notice": "Administrator for this contract"
      },
      "borrowAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to borrow the underlying asset of the given market"
      },
      "checkMembership(address,address)": {
        "notice": "Returns whether the given account is entered in the given asset"
      },
      "closeFactorMantissa()": {
        "notice": "Multiplier used to calculate the maximum repayAmount when liquidating a borrow"
      },
      "comptrollerImplementation()": {
        "notice": "Active brains of Unitroller"
      },
      "exitMarket(address)": {
        "notice": "Removes asset from sender's account liquidity calculation"
      },
      "getAccountLiquidity(address)": {
        "notice": "Determine the current account liquidity wrt collateral requirements"
      },
      "getAssetsIn(address)": {
        "notice": "Returns the assets an account has entered"
      },
      "isComptroller()": {
        "notice": "Indicator that this is a Comptroller contract (for inspection)"
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "notice": "Checks if the liquidation should be allowed to occur"
      },
      "liquidateCalculateSeizeTokens(address,uint256)": {
        "notice": "Calculate number of tokens of collateral asset to seize given an underlying amount"
      },
      "liquidationIncentiveMantissa()": {
        "notice": "Multiplier representing the discount on collateral that a liquidator receives"
      },
      "markets(address)": {
        "notice": "Official mapping of cTokens -> Market metadata"
      },
      "maxAssets()": {
        "notice": "Max number of assets a single account can participate in (borrow or use as collateral)"
      },
      "mintAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to mint tokens in the given market"
      },
      "oracle()": {
        "notice": "Oracle which gives the price of any given asset"
      },
      "pendingAdmin()": {
        "notice": "Pending administrator for this contract"
      },
      "pendingComptrollerImplementation()": {
        "notice": "Pending brains of Unitroller"
      },
      "redeemAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to redeem tokens in the given market"
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "notice": "Validates redeem and reverts on rejection."
      },
      "registerVestingContract(address)": {
        "notice": "Registers vesting contract. Validates the recipient is the vault contract and then sets enabled as collateral to true"
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to repay a borrow in the given market"
      },
      "seizeAllowed(address,address,address,address,uint256)": {
        "notice": "Checks if the seizing of assets should be allowed to occur"
      },
      "transferAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to transfer tokens in the given market"
      },
      "vestingCalculateNPV(address)": {
        "notice": "Calculates the NPV of a collateral vesting contract for a given originalOwner"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9443,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9446,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9449,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "comptrollerImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9452,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "pendingComptrollerImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9458,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "oracle",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(PriceOracle)11854"
      },
      {
        "astId": 9461,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "closeFactorMantissa",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 9464,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "liquidationIncentiveMantissa",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 9467,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "maxAssets",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 9473,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "accountAssets",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_contract(CToken)5552)dyn_storage)"
      },
      {
        "astId": 1148,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "_status",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 6529,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "vestingNPVConfig",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(VestingNPVConfig)6527_storage"
      },
      {
        "astId": 6545,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "markets",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(Market)6512_storage)"
      },
      {
        "astId": 6549,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "vestingContractInfo",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_contract(IVesting)13720,t_struct(VestingContractInfo)6540_storage)"
      },
      {
        "astId": 6553,
        "contract": "contracts/Comptroller.sol:Comptroller",
        "label": "accountToVesting",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_contract(IVesting)13720)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(CToken)5552)dyn_storage": {
        "base": "t_contract(CToken)5552",
        "encoding": "dynamic_array",
        "label": "contract CToken[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CToken)5552": {
        "encoding": "inplace",
        "label": "contract CToken",
        "numberOfBytes": "20"
      },
      "t_contract(IVesting)13720": {
        "encoding": "inplace",
        "label": "contract IVesting",
        "numberOfBytes": "20"
      },
      "t_contract(PriceOracle)11854": {
        "encoding": "inplace",
        "label": "contract PriceOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_contract(CToken)5552)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract CToken[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(CToken)5552)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(IVesting)13720)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IVesting)",
        "numberOfBytes": "32",
        "value": "t_contract(IVesting)13720"
      },
      "t_mapping(t_address,t_struct(Market)6512_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Comptroller.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)6512_storage"
      },
      "t_mapping(t_contract(IVesting)13720,t_struct(VestingContractInfo)6540_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IVesting)13720",
        "label": "mapping(contract IVesting => struct Comptroller.VestingContractInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(VestingContractInfo)6540_storage"
      },
      "t_struct(Market)6512_storage": {
        "encoding": "inplace",
        "label": "struct Comptroller.Market",
        "members": [
          {
            "astId": 6505,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "isListed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6507,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "collateralFactorMantissa",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6511,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "accountMembership",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(VestingContractInfo)6540_storage": {
        "encoding": "inplace",
        "label": "struct Comptroller.VestingContractInfo",
        "members": [
          {
            "astId": 6531,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "isListed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6533,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "enabledAsCollateral",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6535,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "vestingContractWrapper",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6537,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "unvestedTokenLiquidator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6539,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "amountOwedToLiquidator",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(VestingNPVConfig)6527_storage": {
        "encoding": "inplace",
        "label": "struct Comptroller.VestingNPVConfig",
        "members": [
          {
            "astId": 6514,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "underlyingAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6516,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "phaseOneDiscountMantissa",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6518,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "phaseTwoDiscountMantissa",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6520,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "phaseThreeDiscountMantissa",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6522,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "phaseOneCutoff",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6524,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "phaseTwoCutoff",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6526,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "collateralFactorMantissa",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
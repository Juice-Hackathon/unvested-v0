{
  "address": "0x840A47872E07f83B8cb2bAB63e66BB984dfbFe37",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract LINKMockToken",
          "name": "_vestingToken",
          "type": "address"
        },
        {
          "internalType": "contract ComptrollerInterface",
          "name": "_comptroller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_defaultVestingAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "contract Vesting",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultVestingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userToVestingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingToken",
      "outputs": [
        {
          "internalType": "contract LINKMockToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb536229811c26544572a011e3c01b7ef6d6aec7692fb870afb1f7e1b4feb506d",
  "receipt": {
    "to": null,
    "from": "0x3652588636C9D85125Fa264f794a63E3af188E03",
    "contractAddress": "0x840A47872E07f83B8cb2bAB63e66BB984dfbFe37",
    "transactionIndex": 0,
    "gasUsed": "760570",
    "logsBloom": "0x
    "blockHash": "0xf8d0a92840552531e9a5ab8fa6be1c53d52ad307d36655121cf158cf615ed499",
    "transactionHash": "0xb536229811c26544572a011e3c01b7ef6d6aec7692fb870afb1f7e1b4feb506d",
    "logs": [],
    "blockNumber": 30488119,
    "cumulativeGasUsed": "760570",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5f105f831dcD69C7af3fA7919dA2e89cd291239C",
    "0xE85177c2E8c9C397fB971A13046317803C063cD7",
    "10000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "f2f1ca7f59ca0117723b533f70db86be",
  "metadata": "{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract LINKMockToken\",\"name\":\"_vestingToken\",\"type\":\"address\"},{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"_comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_defaultVestingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract Vesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultVestingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToVestingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingToken\",\"outputs\":[{\"internalType\":\"contract LINKMockToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/VestingDemoCreator.sol\":\"VestingDemoCreator\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./interfaces/IVesting.sol\\\";\\n\\nabstract contract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function registerVestingContract(address _vestingContractAddress) external virtual;\\n    function withdrawVestingContract(address _vestingContractAddress) external virtual;\\n\\n    function enterMarkets(address[] calldata cTokens) external virtual returns (uint[] memory);\\n    function exitMarket(address cToken) external virtual returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external virtual returns (uint);\\n    // function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external virtual;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external virtual returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external virtual;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external virtual returns (uint);\\n    // function borrowVerify(address cToken, address borrower, uint borrowAmount) external virtual;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external virtual returns (uint);\\n    // function repayBorrowVerify(\\n        // address cToken,\\n        // address payer,\\n        // address borrower,\\n        // uint repayAmount,\\n        // uint borrowerIndex) external virtual;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        IVesting vestingContract,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external virtual returns (uint);\\n    // function liquidateBorrowVerify(\\n        // address cTokenBorrowed,\\n        // address cTokenCollateral,\\n        // address liquidator,\\n        // address borrower,\\n        // uint repayAmount,\\n        // uint seizeTokens) external virtual;\\n\\n    function seizeAllowed(\\n        address vestingContractWrapper,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external virtual returns (uint);\\n    // function seizeVerify(\\n        // address cTokenCollateral,\\n        // address cTokenBorrowed,\\n        // address liquidator,\\n        // address borrower,\\n        // uint seizeTokens) external virtual;\\n    function seizeVestingTokens(\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens,\\n        IVesting vestingContract\\n    ) external virtual returns (uint);\\n    function liquidatorClaimOwedTokens(IVesting _vestingContract) external virtual;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external virtual returns (uint);\\n    // function transferVerify(address cToken, address src, address dst, uint transferTokens) external virtual;\\n\\n    function vestingCalculateNPV(address owner) external virtual view returns (uint, uint256);\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        uint repayAmount) external virtual view returns (uint, uint);\\n\\n    /*** Admin ***/\\n    function _supportCollateralVault(address vestingContract) external virtual returns (uint);\\n}\\n\",\"keccak256\":\"0x47c7624b5279b672a34c6864cb7a3449b69932a144cef6b018bad738ba78b9df\",\"license\":\"MIT\"},\"contracts/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return uint256\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return success\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return remaining\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\",\"keccak256\":\"0x3ad3c03c234c4505e5520476b54d7973fcf2b98bcd45a20796a120682871284e\",\"license\":\"MIT\"},\"contracts/LINKMockToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n// mock class using BasicToken\\ncontract LINKMockToken is ERC20 {\\n    constructor(\\n        address _initialAccount,\\n        uint256 _initialBalance,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    )\\n        public\\n        ERC20(_name, _symbol)\\n    {\\n        _mint(_initialAccount, _initialBalance);\\n        _setupDecimals(_decimals);\\n    }\\n\\n   function mint(address to, uint amount) external {\\n       _mint(to, amount);\\n   }\\n}\\n\",\"keccak256\":\"0x1e231f30c78d95cc5c22eebec64b30a9c38d37e733ffd80fbfc7f707a00741f1\",\"license\":\"MIT\"},\"contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe6a9e335fc1103ecb06bdbc7159cb2c2b52a9eddfe1c04a794bd47967e7fccf5\",\"license\":\"MIT\"},\"contracts/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: Apache License, Version 2.0\\npragma solidity 0.6.10;\\n\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\ncontract Vesting {\\n    using SafeMath for uint256;\\n\\n    address public vestingToken;\\n    address public recipient;\\n\\n    uint256 public vestingAmount;\\n    uint256 public vestingBegin;\\n    uint256 public vestingCliff;\\n    uint256 public vestingEnd;\\n\\n    uint256 public lastUpdate;\\n\\n    constructor(\\n        address vestingToken_,\\n        address recipient_,\\n        uint256 vestingAmount_,\\n        uint256 vestingBegin_,\\n        uint256 vestingCliff_,\\n        uint256 vestingEnd_\\n    ) public {\\n        // Commenting this out for simplicity\\n        // require(vestingBegin_ >= block.timestamp, \\\"TreasuryVester.constructor: vesting begin too early\\\");\\n        require(vestingCliff_ >= vestingBegin_, \\\"TreasuryVester.constructor: cliff is too early\\\");\\n        require(vestingEnd_ > vestingCliff_, \\\"TreasuryVester.constructor: end is too early\\\");\\n\\n        vestingToken = vestingToken_;\\n        recipient = recipient_;\\n\\n        vestingAmount = vestingAmount_;\\n        vestingBegin = vestingBegin_;\\n        vestingCliff = vestingCliff_;\\n        vestingEnd = vestingEnd_;\\n\\n        lastUpdate = vestingBegin;\\n    }\\n\\n    function setRecipient(address recipient_) public {\\n        require(msg.sender == recipient, \\\"TreasuryVester.setRecipient: unauthorized\\\");\\n        recipient = recipient_;\\n    }\\n\\n    function claim() public {\\n        require(block.timestamp >= vestingCliff, \\\"TreasuryVester.claim: not time yet\\\");\\n        uint256 amount;\\n        if (block.timestamp >= vestingEnd) {\\n            amount = EIP20Interface(vestingToken).balanceOf(address(this));\\n        } else {\\n            amount = vestingAmount.mul(block.timestamp.sub(lastUpdate)).div(vestingEnd.sub(vestingBegin));\\n            lastUpdate = block.timestamp;\\n        }\\n        EIP20Interface(vestingToken).transfer(recipient, amount);\\n    }\\n}\\n\\ncontract VestingUserTwo is Vesting {\\n    constructor(\\n        address vestingToken_,\\n        address recipient_,\\n        uint256 vestingAmount_,\\n        uint256 vestingBegin_,\\n        uint256 vestingCliff_,\\n        uint256 vestingEnd_\\n    ) public Vesting(\\n        vestingToken_,\\n        recipient_,\\n        vestingAmount_,\\n        vestingBegin_,\\n        vestingCliff_,\\n        vestingEnd_\\n    ) {}\\n}\",\"keccak256\":\"0xe967d9a16bec1f56eb3127d98a596387f8c012f2d419dd1286ab5f8b087cc5be\",\"license\":\"Apache License\"},\"contracts/VestingDemoCreator.sol\":{\"content\":\"// SPDX-License-Identifier: Apache License, Version 2.0\\npragma solidity 0.6.10;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { Vesting } from \\\"./Vesting.sol\\\";\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./LINKMockToken.sol\\\";\\n\\ncontract VestingDemoCreator {\\n    using SafeMath for uint256;\\n\\n    uint256 ONE_YEAR_IN_SECONDS = 31557600;\\n\\n    ComptrollerInterface public immutable comptroller;\\n    LINKMockToken public immutable vestingToken;\\n    uint256 public immutable defaultVestingAmount;\\n    mapping(address => address) public userToVestingContract;\\n\\n    constructor(\\n        LINKMockToken _vestingToken,\\n        ComptrollerInterface _comptroller,\\n        uint256 _defaultVestingAmount\\n    ) public {\\n        vestingToken = _vestingToken;\\n        comptroller = _comptroller;\\n        defaultVestingAmount = _defaultVestingAmount;\\n    }\\n\\n    function create(address _recipient) external returns (Vesting) {\\n        // Deploy vesting contract\\n        Vesting vestingContract = new Vesting(\\n            address(vestingToken),\\n            _recipient,\\n            defaultVestingAmount,\\n            block.timestamp,                                    // Start vesting at time of deployment\\n            block.timestamp,                                    // No cliff\\n            block.timestamp.add(ONE_YEAR_IN_SECONDS.mul(2))     // 2 year vesting schedule\\n        );\\n\\n        // Mint tokens to vesting contract. Unlimited supply tokens\\n        vestingToken.mint(address(vestingContract), defaultVestingAmount);\\n        \\n        // Track created vesting contract in mapping for UI\\n        userToVestingContract[msg.sender] = address(vestingContract);\\n\\n        // Whitelist on Comptroller. Must be whitelisted on Comptroller first\\n        comptroller._supportCollateralVault(address(vestingContract));\\n\\n        return vestingContract;\\n    }\\n}\",\"keccak256\":\"0x545c201d27ae22e75915a77f060468a467da17814eb752f120ce39c800826687\",\"license\":\"Apache License\"},\"contracts/interfaces/IVesting.sol\":{\"content\":\"// SPDX-License-Identifier: Apache License, Version 2.0\\npragma solidity 0.6.10;\\n\\ninterface IVesting {\\n    function recipient() external view returns(address);\\n    function vestingToken() external view returns(address);\\n    function vestingAmount() external view returns(uint256);\\n    function vestingBegin() external view returns(uint256);\\n    function vestingCliff() external view returns(uint256);\\n    function vestingEnd() external view returns(uint256);\\n    function lastUpdate() external view returns(uint256);\\n\\n    function setRecipient(address recipient_) external;\\n    function claim() external;\\n}\",\"keccak256\":\"0x5cbefb86bc509839d02ad089839fa0748eb28b1f9d4eae4bc26f8407911d1dd7\",\"license\":\"Apache License\"}},\"version\":1}",
  "bytecode": "0x60e06040526301e187e060005534801561001857600080fd5b50604051610d17380380610d178339818101604052606081101561003b57600080fd5b50805160208201516040909201516001600160601b0319606092831b811660a0529290911b90911660805260c05260805160601c60a05160601c60c051610c646100b3600039806101385280610181528061025c52508060f0528061015f528061022c52508061011452806103275250610c646000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806319d152fa1461005c5780635fe3b567146100805780639a692f32146100885780639ed93318146100a2578063ce53f88d146100c8575b600080fd5b6100646100ee565b604080516001600160a01b039092168252519081900360200190f35b610064610112565b610090610136565b60408051918252519081900360200190f35b610064600480360360208110156100b857600080fd5b50356001600160a01b031661015a565b610064600480360360208110156100de57600080fd5b50356001600160a01b03166103a3565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f0000000000000000000000000000000000000000000000000000000000000000837f000000000000000000000000000000000000000000000000000000000000000042426101c86101bb60026000546103be90919063ffffffff16565b429063ffffffff61042016565b6040516101d49061047a565b6001600160a01b0396871681529490951660208501526040808501939093526060840191909152608083015260a082019290925290519081900360c001906000f080158015610227573d6000803e3d6000fd5b5090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c10f19827f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156102ca57600080fd5b505af11580156102de573d6000803e3d6000fd5b505033600090815260016020908152604080832080546001600160a01b0319166001600160a01b038881169182179092558251631f42141560e01b8152600481019190915291517f00000000000000000000000000000000000000000000000000000000000000009091169550631f421415945060248083019491928390030190829087803b15801561037057600080fd5b505af1158015610384573d6000803e3d6000fd5b505050506040513d602081101561039a57600080fd5b50909392505050565b6001602052600090815260409020546001600160a01b031681565b6000826103cd5750600061041a565b828202828482816103da57fe5b04146104175760405162461bcd60e51b8152600401808060200182810382526021815260200180610c0e6021913960400191505060405180910390fd5b90505b92915050565b600082820183811015610417576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b610786806104888339019056fe608060405234801561001057600080fd5b50604051610786380380610786833981810160405260c081101561003357600080fd5b508051602082015160408301516060840151608085015160a0909501519394929391929091828210156100975760405162461bcd60e51b815260040180806020018281038252602e81526020018061072c602e913960400191505060405180910390fd5b8181116100d55760405162461bcd60e51b815260040180806020018281038252602c81526020018061075a602c913960400191505060405180910390fd5b600080546001600160a01b039788166001600160a01b031991821617909155600180549690971695169490941790945560029190915560038190556004929092556005556006556106018061012b6000396000f3fe608060405234801561001057600080fd5b50600436106100925760003560e01c806366d003ac1161006657806366d003ac1461010557806384a1931f1461010d578063c046371114610115578063e29bc68b1461011d578063f3640e741461012557610092565b8062728f761461009757806319d152fa146100b15780633bbed4a0146100d55780634e71d92d146100fd575b600080fd5b61009f61012d565b60408051918252519081900360200190f35b6100b9610133565b604080516001600160a01b039092168252519081900360200190f35b6100fb600480360360208110156100eb57600080fd5b50356001600160a01b0316610142565b005b6100fb6101ad565b6100b9610356565b61009f610365565b61009f61036b565b61009f610371565b61009f610377565b60025481565b6000546001600160a01b031681565b6001546001600160a01b0316331461018b5760405162461bcd60e51b81526004018080602001828103825260298152602001806105606029913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6004544210156101ee5760405162461bcd60e51b81526004018080602001828103825260228152602001806105896022913960400191505060405180910390fd5b6000600554421061027757600054604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561024457600080fd5b505afa158015610258573d6000803e3d6000fd5b505050506040513d602081101561026e57600080fd5b505190506102cb565b6102c461029160035460055461037d90919063ffffffff16565b6102b86102a96006544261037d90919063ffffffff16565b6002549063ffffffff6103c816565b9063ffffffff61042116565b4260065590505b600080546001546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018690529051919092169263a9059cbb92604480820193602093909283900390910190829087803b15801561032757600080fd5b505af115801561033b573d6000803e3d6000fd5b505050506040513d602081101561035157600080fd5b505050565b6001546001600160a01b031681565b60055481565b60065481565b60035481565b60045481565b60006103bf83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250610463565b90505b92915050565b6000826103d7575060006103c2565b828202828482816103e457fe5b04146103bf5760405162461bcd60e51b81526004018080602001828103825260218152602001806105ab6021913960400191505060405180910390fd5b60006103bf83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506104fa565b600081848411156104f25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104b757818101518382015260200161049f565b50505050905090810190601f1680156104e45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836105495760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156104b757818101518382015260200161049f565b50600083858161055557fe5b049594505050505056fe54726561737572795665737465722e736574526563697069656e743a20756e617574686f72697a656454726561737572795665737465722e636c61696d3a206e6f742074696d6520796574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220ce37cfbd7e7ec3d91ed847af210c34238952f0bdb95f41840b7504349132570164736f6c634300060a003354726561737572795665737465722e636f6e7374727563746f723a20636c69666620697320746f6f206561726c7954726561737572795665737465722e636f6e7374727563746f723a20656e6420697320746f6f206561726c79536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220211a177a057176a0de83d4da73e0932c5b4df7f4e4bcb31a807cc4accf4f066a64736f6c634300060a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806319d152fa1461005c5780635fe3b567146100805780639a692f32146100885780639ed93318146100a2578063ce53f88d146100c8575b600080fd5b6100646100ee565b604080516001600160a01b039092168252519081900360200190f35b610064610112565b610090610136565b60408051918252519081900360200190f35b610064600480360360208110156100b857600080fd5b50356001600160a01b031661015a565b610064600480360360208110156100de57600080fd5b50356001600160a01b03166103a3565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f0000000000000000000000000000000000000000000000000000000000000000837f000000000000000000000000000000000000000000000000000000000000000042426101c86101bb60026000546103be90919063ffffffff16565b429063ffffffff61042016565b6040516101d49061047a565b6001600160a01b0396871681529490951660208501526040808501939093526060840191909152608083015260a082019290925290519081900360c001906000f080158015610227573d6000803e3d6000fd5b5090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c10f19827f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156102ca57600080fd5b505af11580156102de573d6000803e3d6000fd5b505033600090815260016020908152604080832080546001600160a01b0319166001600160a01b038881169182179092558251631f42141560e01b8152600481019190915291517f00000000000000000000000000000000000000000000000000000000000000009091169550631f421415945060248083019491928390030190829087803b15801561037057600080fd5b505af1158015610384573d6000803e3d6000fd5b505050506040513d602081101561039a57600080fd5b50909392505050565b6001602052600090815260409020546001600160a01b031681565b6000826103cd5750600061041a565b828202828482816103da57fe5b04146104175760405162461bcd60e51b8152600401808060200182810382526021815260200180610c0e6021913960400191505060405180910390fd5b90505b92915050565b600082820183811015610417576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b610786806104888339019056fe608060405234801561001057600080fd5b50604051610786380380610786833981810160405260c081101561003357600080fd5b508051602082015160408301516060840151608085015160a0909501519394929391929091828210156100975760405162461bcd60e51b815260040180806020018281038252602e81526020018061072c602e913960400191505060405180910390fd5b8181116100d55760405162461bcd60e51b815260040180806020018281038252602c81526020018061075a602c913960400191505060405180910390fd5b600080546001600160a01b039788166001600160a01b031991821617909155600180549690971695169490941790945560029190915560038190556004929092556005556006556106018061012b6000396000f3fe608060405234801561001057600080fd5b50600436106100925760003560e01c806366d003ac1161006657806366d003ac1461010557806384a1931f1461010d578063c046371114610115578063e29bc68b1461011d578063f3640e741461012557610092565b8062728f761461009757806319d152fa146100b15780633bbed4a0146100d55780634e71d92d146100fd575b600080fd5b61009f61012d565b60408051918252519081900360200190f35b6100b9610133565b604080516001600160a01b039092168252519081900360200190f35b6100fb600480360360208110156100eb57600080fd5b50356001600160a01b0316610142565b005b6100fb6101ad565b6100b9610356565b61009f610365565b61009f61036b565b61009f610371565b61009f610377565b60025481565b6000546001600160a01b031681565b6001546001600160a01b0316331461018b5760405162461bcd60e51b81526004018080602001828103825260298152602001806105606029913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6004544210156101ee5760405162461bcd60e51b81526004018080602001828103825260228152602001806105896022913960400191505060405180910390fd5b6000600554421061027757600054604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561024457600080fd5b505afa158015610258573d6000803e3d6000fd5b505050506040513d602081101561026e57600080fd5b505190506102cb565b6102c461029160035460055461037d90919063ffffffff16565b6102b86102a96006544261037d90919063ffffffff16565b6002549063ffffffff6103c816565b9063ffffffff61042116565b4260065590505b600080546001546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018690529051919092169263a9059cbb92604480820193602093909283900390910190829087803b15801561032757600080fd5b505af115801561033b573d6000803e3d6000fd5b505050506040513d602081101561035157600080fd5b505050565b6001546001600160a01b031681565b60055481565b60065481565b60035481565b60045481565b60006103bf83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250610463565b90505b92915050565b6000826103d7575060006103c2565b828202828482816103e457fe5b04146103bf5760405162461bcd60e51b81526004018080602001828103825260218152602001806105ab6021913960400191505060405180910390fd5b60006103bf83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506104fa565b600081848411156104f25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104b757818101518382015260200161049f565b50505050905090810190601f1680156104e45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836105495760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156104b757818101518382015260200161049f565b50600083858161055557fe5b049594505050505056fe54726561737572795665737465722e736574526563697069656e743a20756e617574686f72697a656454726561737572795665737465722e636c61696d3a206e6f742074696d6520796574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220ce37cfbd7e7ec3d91ed847af210c34238952f0bdb95f41840b7504349132570164736f6c634300060a003354726561737572795665737465722e636f6e7374727563746f723a20636c69666620697320746f6f206561726c7954726561737572795665737465722e636f6e7374727563746f723a20656e6420697320746f6f206561726c79536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220211a177a057176a0de83d4da73e0932c5b4df7f4e4bcb31a807cc4accf4f066a64736f6c634300060a0033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13552,
        "contract": "contracts/VestingDemoCreator.sol:VestingDemoCreator",
        "label": "ONE_YEAR_IN_SECONDS",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 13562,
        "contract": "contracts/VestingDemoCreator.sol:VestingDemoCreator",
        "label": "userToVestingContract",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}